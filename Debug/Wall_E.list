
Wall_E.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000211c  08004300  08004300  00005300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800641c  0800641c  0000806c  2**0
                  CONTENTS
  4 .ARM          00000000  0800641c  0800641c  0000806c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800641c  0800641c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800641c  0800641c  0000741c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006420  08006420  00007420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006424  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e0  2000006c  08006490  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  08006490  0000874c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b70c  00000000  00000000  00008095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfa  00000000  00000000  000137a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  000154a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a85  00000000  00000000  00016208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d3d  00000000  00000000  00016c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001073b  00000000  00000000  0002e9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a859  00000000  00000000  0003f105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c995e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003eb0  00000000  00000000  000c99a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000cd854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080042e8 	.word	0x080042e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080042e8 	.word	0x080042e8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000930:	f001 f88e 	bl	8001a50 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000934:	f000 f870 	bl	8000a18 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000938:	f000 f9cc 	bl	8000cd4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800093c:	f000 f8b2 	bl	8000aa4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000940:	f000 f8de 	bl	8000b00 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000944:	f000 f92c 	bl	8000ba0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000948:	f000 f976 	bl	8000c38 <MX_TIM3_Init>


  HAL_TIM_Base_Start(&htim1);
 800094c:	482b      	ldr	r0, [pc, #172]	@ (80009fc <main+0xd0>)
 800094e:	f002 fdb3 	bl	80034b8 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000952:	2200      	movs	r2, #0
 8000954:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000958:	4829      	ldr	r0, [pc, #164]	@ (8000a00 <main+0xd4>)
 800095a:	f001 fb7e 	bl	800205a <HAL_GPIO_WritePin>
  SSD1306_Init();
 800095e:	f000 fc69 	bl	8001234 <SSD1306_Init>

  HAL_TIM_Base_Start(&htim2);
 8000962:	4828      	ldr	r0, [pc, #160]	@ (8000a04 <main+0xd8>)
 8000964:	f002 fda8 	bl	80034b8 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT_R, TRIG_PIN_R, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096e:	4824      	ldr	r0, [pc, #144]	@ (8000a00 <main+0xd4>)
 8000970:	f001 fb73 	bl	800205a <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim3);
 8000974:	4824      	ldr	r0, [pc, #144]	@ (8000a08 <main+0xdc>)
 8000976:	f002 fd9f 	bl	80034b8 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT_L, TRIG_PIN_L, GPIO_PIN_RESET);  // pull the TRIG pin low
 800097a:	2200      	movs	r2, #0
 800097c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000980:	481f      	ldr	r0, [pc, #124]	@ (8000a00 <main+0xd4>)
 8000982:	f001 fb6a 	bl	800205a <HAL_GPIO_WritePin>

  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2120      	movs	r1, #32
 800098a:	481d      	ldr	r0, [pc, #116]	@ (8000a00 <main+0xd4>)
 800098c:	f001 fb65 	bl	800205a <HAL_GPIO_WritePin>
	  move_forward();
 8000990:	f000 fbd2 	bl	8001138 <move_forward>
	  DistanceF = read_front();
 8000994:	f000 fa10 	bl	8000db8 <read_front>
 8000998:	4603      	mov	r3, r0
 800099a:	b29a      	uxth	r2, r3
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <main+0xe0>)
 800099e:	801a      	strh	r2, [r3, #0]
	  while(DistanceF < 50)
 80009a0:	e027      	b.n	80009f2 <main+0xc6>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);	//Buzzer
 80009a2:	2201      	movs	r2, #1
 80009a4:	2120      	movs	r1, #32
 80009a6:	4816      	ldr	r0, [pc, #88]	@ (8000a00 <main+0xd4>)
 80009a8:	f001 fb57 	bl	800205a <HAL_GPIO_WritePin>
		  stop();
 80009ac:	f000 fc20 	bl	80011f0 <stop>
		  DistanceR = read_right();
 80009b0:	f000 fb3a 	bl	8001028 <read_right>
 80009b4:	4603      	mov	r3, r0
 80009b6:	b29a      	uxth	r2, r3
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <main+0xe4>)
 80009ba:	801a      	strh	r2, [r3, #0]
		  DistanceL = read_left();
 80009bc:	f000 faac 	bl	8000f18 <read_left>
 80009c0:	4603      	mov	r3, r0
 80009c2:	b29a      	uxth	r2, r3
 80009c4:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <main+0xe8>)
 80009c6:	801a      	strh	r2, [r3, #0]
		  if (DistanceR > DistanceL)
 80009c8:	4b11      	ldr	r3, [pc, #68]	@ (8000a10 <main+0xe4>)
 80009ca:	881a      	ldrh	r2, [r3, #0]
 80009cc:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <main+0xe8>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d904      	bls.n	80009de <main+0xb2>
		  {
			  turn_right();
 80009d4:	f000 fbcc 	bl	8001170 <turn_right>
			  stop();
 80009d8:	f000 fc0a 	bl	80011f0 <stop>
 80009dc:	e003      	b.n	80009e6 <main+0xba>
		  }
		  else
		  {
			turn_left();
 80009de:	f000 fbe7 	bl	80011b0 <turn_left>
			stop();
 80009e2:	f000 fc05 	bl	80011f0 <stop>
		  }
		  /*else{
			  move_backward();
			  stop();
		  }*/
		  DistanceF = read_front();
 80009e6:	f000 f9e7 	bl	8000db8 <read_front>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <main+0xe0>)
 80009f0:	801a      	strh	r2, [r3, #0]
	  while(DistanceF < 50)
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <main+0xe0>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	2b31      	cmp	r3, #49	@ 0x31
 80009f8:	d9d3      	bls.n	80009a2 <main+0x76>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80009fa:	e7c4      	b.n	8000986 <main+0x5a>
 80009fc:	200000dc 	.word	0x200000dc
 8000a00:	40010c00 	.word	0x40010c00
 8000a04:	20000124 	.word	0x20000124
 8000a08:	2000016c 	.word	0x2000016c
 8000a0c:	200001c0 	.word	0x200001c0
 8000a10:	200001e0 	.word	0x200001e0
 8000a14:	200001f0 	.word	0x200001f0

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b090      	sub	sp, #64	@ 0x40
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 0318 	add.w	r3, r7, #24
 8000a22:	2228      	movs	r2, #40	@ 0x28
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 ffce 	bl	80039c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
 8000a38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a50:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a56:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	4618      	mov	r0, r3
 8000a62:	f002 f8dd 	bl	8002c20 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a6c:	f000 fbdc 	bl	8001228 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a70:	230f      	movs	r3, #15
 8000a72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 fb4a 	bl	8003124 <HAL_RCC_ClockConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a96:	f000 fbc7 	bl	8001228 <Error_Handler>
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3740      	adds	r7, #64	@ 0x40
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  hi2c1.Instance = I2C1;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000aaa:	4a13      	ldr	r2, [pc, #76]	@ (8000af8 <MX_I2C1_Init+0x54>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000aae:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ab0:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <MX_I2C1_Init+0x58>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ac2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ac6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad4:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae0:	4804      	ldr	r0, [pc, #16]	@ (8000af4 <MX_I2C1_Init+0x50>)
 8000ae2:	f001 fad3 	bl	800208c <HAL_I2C_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aec:	f000 fb9c 	bl	8001228 <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000088 	.word	0x20000088
 8000af8:	40005400 	.word	0x40005400
 8000afc:	00061a80 	.word	0x00061a80

08000b00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	463b      	mov	r3, r7
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b9c <MX_TIM1_Init+0x9c>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000b22:	4b1d      	ldr	r3, [pc, #116]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b24:	2247      	movs	r2, #71	@ 0x47
 8000b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b48:	4813      	ldr	r0, [pc, #76]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b4a:	f002 fc65 	bl	8003418 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b54:	f000 fb68 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	4619      	mov	r1, r3
 8000b64:	480c      	ldr	r0, [pc, #48]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b66:	f002 fcf1 	bl	800354c <HAL_TIM_ConfigClockSource>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b70:	f000 fb5a 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_TIM1_Init+0x98>)
 8000b82:	f002 fea3 	bl	80038cc <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b8c:	f000 fb4c 	bl	8001228 <Error_Handler>
  }
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000dc 	.word	0x200000dc
 8000b9c:	40012c00 	.word	0x40012c00

08000ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bc6:	2247      	movs	r2, #71	@ 0x47
 8000bc8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be4:	4813      	ldr	r0, [pc, #76]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000be6:	f002 fc17 	bl	8003418 <HAL_TIM_Base_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bf0:	f000 fb1a 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000c02:	f002 fca3 	bl	800354c <HAL_TIM_ConfigClockSource>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c0c:	f000 fb0c 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c18:	463b      	mov	r3, r7
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_TIM2_Init+0x94>)
 8000c1e:	f002 fe55 	bl	80038cc <HAL_TIMEx_MasterConfigSynchronization>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c28:	f000 fafe 	bl	8001228 <Error_Handler>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000124 	.word	0x20000124

08000c38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <MX_TIM3_Init+0x94>)
 8000c56:	4a1e      	ldr	r2, [pc, #120]	@ (8000cd0 <MX_TIM3_Init+0x98>)
 8000c58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <MX_TIM3_Init+0x94>)
 8000c5c:	2247      	movs	r2, #71	@ 0x47
 8000c5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_TIM3_Init+0x94>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <MX_TIM3_Init+0x94>)
 8000c68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c6c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_TIM3_Init+0x94>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c74:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_TIM3_Init+0x94>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c7a:	4814      	ldr	r0, [pc, #80]	@ (8000ccc <MX_TIM3_Init+0x94>)
 8000c7c:	f002 fbcc 	bl	8003418 <HAL_TIM_Base_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c86:	f000 facf 	bl	8001228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c90:	f107 0308 	add.w	r3, r7, #8
 8000c94:	4619      	mov	r1, r3
 8000c96:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <MX_TIM3_Init+0x94>)
 8000c98:	f002 fc58 	bl	800354c <HAL_TIM_ConfigClockSource>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ca2:	f000 fac1 	bl	8001228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4806      	ldr	r0, [pc, #24]	@ (8000ccc <MX_TIM3_Init+0x94>)
 8000cb4:	f002 fe0a 	bl	80038cc <HAL_TIMEx_MasterConfigSynchronization>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000cbe:	f000 fab3 	bl	8001228 <Error_Handler>
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	3718      	adds	r7, #24
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	2000016c 	.word	0x2000016c
 8000cd0:	40000400 	.word	0x40000400

08000cd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b088      	sub	sp, #32
 8000cd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a2e      	ldr	r2, [pc, #184]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cee:	f043 0320 	orr.w	r3, r3, #32
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0320 	and.w	r3, r3, #32
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b29      	ldr	r3, [pc, #164]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a28      	ldr	r2, [pc, #160]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b26      	ldr	r3, [pc, #152]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60bb      	str	r3, [r7, #8]
 8000d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a22      	ldr	r2, [pc, #136]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <MX_GPIO_Init+0xd4>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0304 	and.w	r3, r3, #4
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	f64a 0120 	movw	r1, #43040	@ 0xa820
 8000d36:	481d      	ldr	r0, [pc, #116]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d38:	f001 f98f 	bl	800205a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_11
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f649 11a0 	movw	r1, #39328	@ 0x99a0
 8000d42:	481b      	ldr	r0, [pc, #108]	@ (8000db0 <MX_GPIO_Init+0xdc>)
 8000d44:	f001 f989 	bl	800205a <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB10 PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14;
 8000d48:	f44f 43a8 	mov.w	r3, #21504	@ 0x5400
 8000d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4813      	ldr	r0, [pc, #76]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d5e:	f000 ffe1 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_15 | GPIO_PIN_5;
 8000d62:	f64a 0320 	movw	r3, #43040	@ 0xa820
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480c      	ldr	r0, [pc, #48]	@ (8000dac <MX_GPIO_Init+0xd8>)
 8000d7c:	f000 ffd2 	bl	8001d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_11
 8000d80:	f649 13a0 	movw	r3, #39328	@ 0x99a0
 8000d84:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	f107 0310 	add.w	r3, r7, #16
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	@ (8000db0 <MX_GPIO_Init+0xdc>)
 8000d9a:	f000 ffc3 	bl	8001d24 <HAL_GPIO_Init>
}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40010800 	.word	0x40010800
 8000db4:	00000000 	.word	0x00000000

08000db8 <read_front>:

int read_front(void)
{
 8000db8:	b598      	push	{r3, r4, r7, lr}
 8000dba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dc2:	4849      	ldr	r0, [pc, #292]	@ (8000ee8 <read_front+0x130>)
 8000dc4:	f001 f949 	bl	800205a <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dc8:	4b48      	ldr	r3, [pc, #288]	@ (8000eec <read_front+0x134>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8000dd0:	bf00      	nop
 8000dd2:	4b46      	ldr	r3, [pc, #280]	@ (8000eec <read_front+0x134>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd8:	2b09      	cmp	r3, #9
 8000dda:	d9fa      	bls.n	8000dd2 <read_front+0x1a>
    HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000de2:	4841      	ldr	r0, [pc, #260]	@ (8000ee8 <read_front+0x130>)
 8000de4:	f001 f939 	bl	800205a <HAL_GPIO_WritePin>

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000de8:	f000 fe8a 	bl	8001b00 <HAL_GetTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	4a40      	ldr	r2, [pc, #256]	@ (8000ef0 <read_front+0x138>)
 8000df0:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go high
    while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8000df2:	bf00      	nop
 8000df4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000df8:	483b      	ldr	r0, [pc, #236]	@ (8000ee8 <read_front+0x130>)
 8000dfa:	f001 f917 	bl	800202c <HAL_GPIO_ReadPin>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d108      	bne.n	8000e16 <read_front+0x5e>
 8000e04:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef0 <read_front+0x138>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f103 040a 	add.w	r4, r3, #10
 8000e0c:	f000 fe78 	bl	8001b00 <HAL_GetTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	429c      	cmp	r4, r3
 8000e14:	d8ee      	bhi.n	8000df4 <read_front+0x3c>
    Value1F = __HAL_TIM_GET_COUNTER (&htim1);
 8000e16:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <read_front+0x134>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1c:	4a35      	ldr	r2, [pc, #212]	@ (8000ef4 <read_front+0x13c>)
 8000e1e:	6013      	str	r3, [r2, #0]

    pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000e20:	f000 fe6e 	bl	8001b00 <HAL_GetTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a32      	ldr	r2, [pc, #200]	@ (8000ef0 <read_front+0x138>)
 8000e28:	6013      	str	r3, [r2, #0]
    // wait for the echo pin to go low
    while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8000e2a:	bf00      	nop
 8000e2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e30:	482d      	ldr	r0, [pc, #180]	@ (8000ee8 <read_front+0x130>)
 8000e32:	f001 f8fb 	bl	800202c <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d008      	beq.n	8000e4e <read_front+0x96>
 8000e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ef0 <read_front+0x138>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000e44:	f000 fe5c 	bl	8001b00 <HAL_GetTick>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	429c      	cmp	r4, r3
 8000e4c:	d8ee      	bhi.n	8000e2c <read_front+0x74>
    Value2F = __HAL_TIM_GET_COUNTER (&htim1);
 8000e4e:	4b27      	ldr	r3, [pc, #156]	@ (8000eec <read_front+0x134>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e54:	4a28      	ldr	r2, [pc, #160]	@ (8000ef8 <read_front+0x140>)
 8000e56:	6013      	str	r3, [r2, #0]

    DistanceF = (Value2F-Value1F)* 0.034/2;
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <read_front+0x140>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <read_front+0x13c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fab6 	bl	80003d4 <__aeabi_ui2d>
 8000e68:	a31d      	add	r3, pc, #116	@ (adr r3, 8000ee0 <read_front+0x128>)
 8000e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6e:	f7ff fb2b 	bl	80004c8 <__aeabi_dmul>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4610      	mov	r0, r2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e82:	f7ff fc4b 	bl	800071c <__aeabi_ddiv>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	4610      	mov	r0, r2
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f7ff fd2d 	bl	80008ec <__aeabi_d2uiz>
 8000e92:	4603      	mov	r3, r0
 8000e94:	b29a      	uxth	r2, r3
 8000e96:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <read_front+0x144>)
 8000e98:	801a      	strh	r2, [r3, #0]

    //LCD
    SSD1306_GotoXY (0, 0);
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f000 fb31 	bl	8001504 <SSD1306_GotoXY>
    SSD1306_Puts ("Distance:", &Font_11x18, 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4916      	ldr	r1, [pc, #88]	@ (8000f00 <read_front+0x148>)
 8000ea6:	4817      	ldr	r0, [pc, #92]	@ (8000f04 <read_front+0x14c>)
 8000ea8:	f000 fbc0 	bl	800162c <SSD1306_Puts>
    sprintf(strCopy,"%d    ", DistanceF);
 8000eac:	4b13      	ldr	r3, [pc, #76]	@ (8000efc <read_front+0x144>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4915      	ldr	r1, [pc, #84]	@ (8000f08 <read_front+0x150>)
 8000eb4:	4815      	ldr	r0, [pc, #84]	@ (8000f0c <read_front+0x154>)
 8000eb6:	f002 fd67 	bl	8003988 <siprintf>
    SSD1306_GotoXY (0, 30);
 8000eba:	211e      	movs	r1, #30
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 fb21 	bl	8001504 <SSD1306_GotoXY>
    SSD1306_Puts (strCopy, &Font_16x26, 1);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4912      	ldr	r1, [pc, #72]	@ (8000f10 <read_front+0x158>)
 8000ec6:	4811      	ldr	r0, [pc, #68]	@ (8000f0c <read_front+0x154>)
 8000ec8:	f000 fbb0 	bl	800162c <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000ecc:	f000 fa76 	bl	80013bc <SSD1306_UpdateScreen>
    HAL_Delay(50);
 8000ed0:	2032      	movs	r0, #50	@ 0x32
 8000ed2:	f000 fe1f 	bl	8001b14 <HAL_Delay>


    return DistanceF;
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <read_front+0x144>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd98      	pop	{r3, r4, r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	b020c49c 	.word	0xb020c49c
 8000ee4:	3fa16872 	.word	0x3fa16872
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	200000dc 	.word	0x200000dc
 8000ef0:	200001b4 	.word	0x200001b4
 8000ef4:	200001b8 	.word	0x200001b8
 8000ef8:	200001bc 	.word	0x200001bc
 8000efc:	200001c0 	.word	0x200001c0
 8000f00:	20000000 	.word	0x20000000
 8000f04:	08004300 	.word	0x08004300
 8000f08:	0800430c 	.word	0x0800430c
 8000f0c:	200001c4 	.word	0x200001c4
 8000f10:	20000008 	.word	0x20000008
 8000f14:	00000000 	.word	0x00000000

08000f18 <read_left>:

int read_left(void)
{
 8000f18:	b598      	push	{r3, r4, r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_L, TRIG_PIN_L, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f22:	483b      	ldr	r0, [pc, #236]	@ (8001010 <read_left+0xf8>)
 8000f24:	f001 f899 	bl	800205a <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000f28:	4b3a      	ldr	r3, [pc, #232]	@ (8001014 <read_left+0xfc>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim2) < 10);  // wait for 10 us
 8000f30:	bf00      	nop
 8000f32:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <read_left+0xfc>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f38:	2b09      	cmp	r3, #9
 8000f3a:	d9fa      	bls.n	8000f32 <read_left+0x1a>
	HAL_GPIO_WritePin(TRIG_PORT_L, TRIG_PIN_L, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f42:	4833      	ldr	r0, [pc, #204]	@ (8001010 <read_left+0xf8>)
 8000f44:	f001 f889 	bl	800205a <HAL_GPIO_WritePin>

	pMillis_L = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8000f48:	f000 fdda 	bl	8001b00 <HAL_GetTick>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	4a32      	ldr	r2, [pc, #200]	@ (8001018 <read_left+0x100>)
 8000f50:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT_L, ECHO_PIN_L)) && pMillis_L + 10 >  HAL_GetTick());
 8000f52:	bf00      	nop
 8000f54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f58:	482d      	ldr	r0, [pc, #180]	@ (8001010 <read_left+0xf8>)
 8000f5a:	f001 f867 	bl	800202c <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d108      	bne.n	8000f76 <read_left+0x5e>
 8000f64:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <read_left+0x100>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f103 040a 	add.w	r4, r3, #10
 8000f6c:	f000 fdc8 	bl	8001b00 <HAL_GetTick>
 8000f70:	4603      	mov	r3, r0
 8000f72:	429c      	cmp	r4, r3
 8000f74:	d8ee      	bhi.n	8000f54 <read_left+0x3c>
	Value1L = __HAL_TIM_GET_COUNTER (&htim2);
 8000f76:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <read_left+0xfc>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7c:	4a27      	ldr	r2, [pc, #156]	@ (800101c <read_left+0x104>)
 8000f7e:	6013      	str	r3, [r2, #0]

	pMillis_L = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8000f80:	f000 fdbe 	bl	8001b00 <HAL_GetTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a24      	ldr	r2, [pc, #144]	@ (8001018 <read_left+0x100>)
 8000f88:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT_L, ECHO_PIN_L)) && pMillis_L + 50 > HAL_GetTick());
 8000f8a:	bf00      	nop
 8000f8c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f90:	481f      	ldr	r0, [pc, #124]	@ (8001010 <read_left+0xf8>)
 8000f92:	f001 f84b 	bl	800202c <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d008      	beq.n	8000fae <read_left+0x96>
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <read_left+0x100>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8000fa4:	f000 fdac 	bl	8001b00 <HAL_GetTick>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	429c      	cmp	r4, r3
 8000fac:	d8ee      	bhi.n	8000f8c <read_left+0x74>
	Value2L = __HAL_TIM_GET_COUNTER (&htim2);
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <read_left+0xfc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001020 <read_left+0x108>)
 8000fb6:	6013      	str	r3, [r2, #0]

	DistanceL = (Value2L-Value1L)* 0.034/2;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <read_left+0x108>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <read_left+0x104>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fa06 	bl	80003d4 <__aeabi_ui2d>
 8000fc8:	a30f      	add	r3, pc, #60	@ (adr r3, 8001008 <read_left+0xf0>)
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	f7ff fa7b 	bl	80004c8 <__aeabi_dmul>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000fe2:	f7ff fb9b 	bl	800071c <__aeabi_ddiv>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4610      	mov	r0, r2
 8000fec:	4619      	mov	r1, r3
 8000fee:	f7ff fc7d 	bl	80008ec <__aeabi_d2uiz>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <read_left+0x10c>)
 8000ff8:	801a      	strh	r2, [r3, #0]
	return DistanceL;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <read_left+0x10c>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd98      	pop	{r3, r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	b020c49c 	.word	0xb020c49c
 800100c:	3fa16872 	.word	0x3fa16872
 8001010:	40010c00 	.word	0x40010c00
 8001014:	20000124 	.word	0x20000124
 8001018:	200001e4 	.word	0x200001e4
 800101c:	200001e8 	.word	0x200001e8
 8001020:	200001ec 	.word	0x200001ec
 8001024:	200001f0 	.word	0x200001f0

08001028 <read_right>:

int read_right(void)
{
 8001028:	b598      	push	{r3, r4, r7, lr}
 800102a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT_R, TRIG_PIN_R, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001032:	483b      	ldr	r0, [pc, #236]	@ (8001120 <read_right+0xf8>)
 8001034:	f001 f811 	bl	800205a <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001038:	4b3a      	ldr	r3, [pc, #232]	@ (8001124 <read_right+0xfc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER (&htim3) < 10);  // wait for 10 us
 8001040:	bf00      	nop
 8001042:	4b38      	ldr	r3, [pc, #224]	@ (8001124 <read_right+0xfc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001048:	2b09      	cmp	r3, #9
 800104a:	d9fa      	bls.n	8001042 <read_right+0x1a>
	HAL_GPIO_WritePin(TRIG_PORT_R, TRIG_PIN_R, GPIO_PIN_RESET);  // pull the TRIG pin low
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001052:	4833      	ldr	r0, [pc, #204]	@ (8001120 <read_right+0xf8>)
 8001054:	f001 f801 	bl	800205a <HAL_GPIO_WritePin>

	pMillis_R = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001058:	f000 fd52 	bl	8001b00 <HAL_GetTick>
 800105c:	4603      	mov	r3, r0
 800105e:	4a32      	ldr	r2, [pc, #200]	@ (8001128 <read_right+0x100>)
 8001060:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ECHO_PORT_R, ECHO_PIN_R)) && pMillis_R + 10 >  HAL_GetTick());
 8001062:	bf00      	nop
 8001064:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001068:	482d      	ldr	r0, [pc, #180]	@ (8001120 <read_right+0xf8>)
 800106a:	f000 ffdf 	bl	800202c <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d108      	bne.n	8001086 <read_right+0x5e>
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <read_right+0x100>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f103 040a 	add.w	r4, r3, #10
 800107c:	f000 fd40 	bl	8001b00 <HAL_GetTick>
 8001080:	4603      	mov	r3, r0
 8001082:	429c      	cmp	r4, r3
 8001084:	d8ee      	bhi.n	8001064 <read_right+0x3c>
	Value1R = __HAL_TIM_GET_COUNTER (&htim3);
 8001086:	4b27      	ldr	r3, [pc, #156]	@ (8001124 <read_right+0xfc>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108c:	4a27      	ldr	r2, [pc, #156]	@ (800112c <read_right+0x104>)
 800108e:	6013      	str	r3, [r2, #0]

	pMillis_R = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001090:	f000 fd36 	bl	8001b00 <HAL_GetTick>
 8001094:	4603      	mov	r3, r0
 8001096:	4a24      	ldr	r2, [pc, #144]	@ (8001128 <read_right+0x100>)
 8001098:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ECHO_PORT_R, ECHO_PIN_R)) && pMillis_R + 50 > HAL_GetTick());
 800109a:	bf00      	nop
 800109c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010a0:	481f      	ldr	r0, [pc, #124]	@ (8001120 <read_right+0xf8>)
 80010a2:	f000 ffc3 	bl	800202c <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <read_right+0x96>
 80010ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <read_right+0x100>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 80010b4:	f000 fd24 	bl	8001b00 <HAL_GetTick>
 80010b8:	4603      	mov	r3, r0
 80010ba:	429c      	cmp	r4, r3
 80010bc:	d8ee      	bhi.n	800109c <read_right+0x74>
	Value2R = __HAL_TIM_GET_COUNTER (&htim3);
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <read_right+0xfc>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c4:	4a1a      	ldr	r2, [pc, #104]	@ (8001130 <read_right+0x108>)
 80010c6:	6013      	str	r3, [r2, #0]

	DistanceR = (Value2R-Value1R)* 0.034/2;
 80010c8:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <read_right+0x108>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b17      	ldr	r3, [pc, #92]	@ (800112c <read_right+0x104>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f97e 	bl	80003d4 <__aeabi_ui2d>
 80010d8:	a30f      	add	r3, pc, #60	@ (adr r3, 8001118 <read_right+0xf0>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff f9f3 	bl	80004c8 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4610      	mov	r0, r2
 80010e8:	4619      	mov	r1, r3
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010f2:	f7ff fb13 	bl	800071c <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fbf5 	bl	80008ec <__aeabi_d2uiz>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <read_right+0x10c>)
 8001108:	801a      	strh	r2, [r3, #0]
	return DistanceR;
 800110a:	4b0a      	ldr	r3, [pc, #40]	@ (8001134 <read_right+0x10c>)
 800110c:	881b      	ldrh	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd98      	pop	{r3, r4, r7, pc}
 8001112:	bf00      	nop
 8001114:	f3af 8000 	nop.w
 8001118:	b020c49c 	.word	0xb020c49c
 800111c:	3fa16872 	.word	0x3fa16872
 8001120:	40010c00 	.word	0x40010c00
 8001124:	2000016c 	.word	0x2000016c
 8001128:	200001d4 	.word	0x200001d4
 800112c:	200001d8 	.word	0x200001d8
 8001130:	200001dc 	.word	0x200001dc
 8001134:	200001e0 	.word	0x200001e0

08001138 <move_forward>:

void move_forward(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, GPIO_PIN_SET);
 800113c:	2201      	movs	r2, #1
 800113e:	2180      	movs	r1, #128	@ 0x80
 8001140:	480a      	ldr	r0, [pc, #40]	@ (800116c <move_forward+0x34>)
 8001142:	f000 ff8a 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2120      	movs	r1, #32
 800114a:	4808      	ldr	r0, [pc, #32]	@ (800116c <move_forward+0x34>)
 800114c:	f000 ff85 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <move_forward+0x34>)
 8001158:	f000 ff7f 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001162:	4802      	ldr	r0, [pc, #8]	@ (800116c <move_forward+0x34>)
 8001164:	f000 ff79 	bl	800205a <HAL_GPIO_WritePin>
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40010800 	.word	0x40010800

08001170 <turn_right>:
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_SET);
	HAL_Delay(300);
}
void turn_right(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	2120      	movs	r1, #32
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <turn_right+0x3c>)
 800117a:	f000 ff6e 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2180      	movs	r1, #128	@ 0x80
 8001182:	480a      	ldr	r0, [pc, #40]	@ (80011ac <turn_right+0x3c>)
 8001184:	f000 ff69 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800118e:	4807      	ldr	r0, [pc, #28]	@ (80011ac <turn_right+0x3c>)
 8001190:	f000 ff63 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800119a:	4804      	ldr	r0, [pc, #16]	@ (80011ac <turn_right+0x3c>)
 800119c:	f000 ff5d 	bl	800205a <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80011a0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011a4:	f000 fcb6 	bl	8001b14 <HAL_Delay>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40010800 	.word	0x40010800

080011b0 <turn_left>:

void turn_left(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2180      	movs	r1, #128	@ 0x80
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <turn_left+0x3c>)
 80011ba:	f000 ff4e 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2120      	movs	r1, #32
 80011c2:	480a      	ldr	r0, [pc, #40]	@ (80011ec <turn_left+0x3c>)
 80011c4:	f000 ff49 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011ce:	4807      	ldr	r0, [pc, #28]	@ (80011ec <turn_left+0x3c>)
 80011d0:	f000 ff43 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_RESET);
 80011d4:	2200      	movs	r2, #0
 80011d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011da:	4804      	ldr	r0, [pc, #16]	@ (80011ec <turn_left+0x3c>)
 80011dc:	f000 ff3d 	bl	800205a <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80011e0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011e4:	f000 fc96 	bl	8001b14 <HAL_Delay>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40010800 	.word	0x40010800

080011f0 <stop>:

void stop(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2180      	movs	r1, #128	@ 0x80
 80011f8:	480a      	ldr	r0, [pc, #40]	@ (8001224 <stop+0x34>)
 80011fa:	f000 ff2e 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2120      	movs	r1, #32
 8001202:	4808      	ldr	r0, [pc, #32]	@ (8001224 <stop+0x34>)
 8001204:	f000 ff29 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_11, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <stop+0x34>)
 8001210:	f000 ff23 	bl	800205a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_12, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800121a:	4802      	ldr	r0, [pc, #8]	@ (8001224 <stop+0x34>)
 800121c:	f000 ff1d 	bl	800205a <HAL_GPIO_WritePin>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40010800 	.word	0x40010800

08001228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800122c:	b672      	cpsid	i
}
 800122e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <Error_Handler+0x8>

08001234 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800123a:	f000 fa1d 	bl	8001678 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800123e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001242:	2201      	movs	r2, #1
 8001244:	2178      	movs	r1, #120	@ 0x78
 8001246:	485b      	ldr	r0, [pc, #364]	@ (80013b4 <SSD1306_Init+0x180>)
 8001248:	f001 f962 	bl	8002510 <HAL_I2C_IsDeviceReady>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001252:	2300      	movs	r3, #0
 8001254:	e0a9      	b.n	80013aa <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001256:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800125a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800125c:	e002      	b.n	8001264 <SSD1306_Init+0x30>
		p--;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3b01      	subs	r3, #1
 8001262:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f9      	bne.n	800125e <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800126a:	22ae      	movs	r2, #174	@ 0xae
 800126c:	2100      	movs	r1, #0
 800126e:	2078      	movs	r0, #120	@ 0x78
 8001270:	f000 fa7c 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001274:	2220      	movs	r2, #32
 8001276:	2100      	movs	r1, #0
 8001278:	2078      	movs	r0, #120	@ 0x78
 800127a:	f000 fa77 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800127e:	2210      	movs	r2, #16
 8001280:	2100      	movs	r1, #0
 8001282:	2078      	movs	r0, #120	@ 0x78
 8001284:	f000 fa72 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001288:	22b0      	movs	r2, #176	@ 0xb0
 800128a:	2100      	movs	r1, #0
 800128c:	2078      	movs	r0, #120	@ 0x78
 800128e:	f000 fa6d 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001292:	22c8      	movs	r2, #200	@ 0xc8
 8001294:	2100      	movs	r1, #0
 8001296:	2078      	movs	r0, #120	@ 0x78
 8001298:	f000 fa68 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2078      	movs	r0, #120	@ 0x78
 80012a2:	f000 fa63 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80012a6:	2210      	movs	r2, #16
 80012a8:	2100      	movs	r1, #0
 80012aa:	2078      	movs	r0, #120	@ 0x78
 80012ac:	f000 fa5e 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80012b0:	2240      	movs	r2, #64	@ 0x40
 80012b2:	2100      	movs	r1, #0
 80012b4:	2078      	movs	r0, #120	@ 0x78
 80012b6:	f000 fa59 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80012ba:	2281      	movs	r2, #129	@ 0x81
 80012bc:	2100      	movs	r1, #0
 80012be:	2078      	movs	r0, #120	@ 0x78
 80012c0:	f000 fa54 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80012c4:	22ff      	movs	r2, #255	@ 0xff
 80012c6:	2100      	movs	r1, #0
 80012c8:	2078      	movs	r0, #120	@ 0x78
 80012ca:	f000 fa4f 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80012ce:	22a1      	movs	r2, #161	@ 0xa1
 80012d0:	2100      	movs	r1, #0
 80012d2:	2078      	movs	r0, #120	@ 0x78
 80012d4:	f000 fa4a 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80012d8:	22a6      	movs	r2, #166	@ 0xa6
 80012da:	2100      	movs	r1, #0
 80012dc:	2078      	movs	r0, #120	@ 0x78
 80012de:	f000 fa45 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80012e2:	22a8      	movs	r2, #168	@ 0xa8
 80012e4:	2100      	movs	r1, #0
 80012e6:	2078      	movs	r0, #120	@ 0x78
 80012e8:	f000 fa40 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80012ec:	223f      	movs	r2, #63	@ 0x3f
 80012ee:	2100      	movs	r1, #0
 80012f0:	2078      	movs	r0, #120	@ 0x78
 80012f2:	f000 fa3b 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012f6:	22a4      	movs	r2, #164	@ 0xa4
 80012f8:	2100      	movs	r1, #0
 80012fa:	2078      	movs	r0, #120	@ 0x78
 80012fc:	f000 fa36 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001300:	22d3      	movs	r2, #211	@ 0xd3
 8001302:	2100      	movs	r1, #0
 8001304:	2078      	movs	r0, #120	@ 0x78
 8001306:	f000 fa31 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	2078      	movs	r0, #120	@ 0x78
 8001310:	f000 fa2c 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001314:	22d5      	movs	r2, #213	@ 0xd5
 8001316:	2100      	movs	r1, #0
 8001318:	2078      	movs	r0, #120	@ 0x78
 800131a:	f000 fa27 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800131e:	22f0      	movs	r2, #240	@ 0xf0
 8001320:	2100      	movs	r1, #0
 8001322:	2078      	movs	r0, #120	@ 0x78
 8001324:	f000 fa22 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001328:	22d9      	movs	r2, #217	@ 0xd9
 800132a:	2100      	movs	r1, #0
 800132c:	2078      	movs	r0, #120	@ 0x78
 800132e:	f000 fa1d 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001332:	2222      	movs	r2, #34	@ 0x22
 8001334:	2100      	movs	r1, #0
 8001336:	2078      	movs	r0, #120	@ 0x78
 8001338:	f000 fa18 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800133c:	22da      	movs	r2, #218	@ 0xda
 800133e:	2100      	movs	r1, #0
 8001340:	2078      	movs	r0, #120	@ 0x78
 8001342:	f000 fa13 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001346:	2212      	movs	r2, #18
 8001348:	2100      	movs	r1, #0
 800134a:	2078      	movs	r0, #120	@ 0x78
 800134c:	f000 fa0e 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001350:	22db      	movs	r2, #219	@ 0xdb
 8001352:	2100      	movs	r1, #0
 8001354:	2078      	movs	r0, #120	@ 0x78
 8001356:	f000 fa09 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800135a:	2220      	movs	r2, #32
 800135c:	2100      	movs	r1, #0
 800135e:	2078      	movs	r0, #120	@ 0x78
 8001360:	f000 fa04 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001364:	228d      	movs	r2, #141	@ 0x8d
 8001366:	2100      	movs	r1, #0
 8001368:	2078      	movs	r0, #120	@ 0x78
 800136a:	f000 f9ff 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800136e:	2214      	movs	r2, #20
 8001370:	2100      	movs	r1, #0
 8001372:	2078      	movs	r0, #120	@ 0x78
 8001374:	f000 f9fa 	bl	800176c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001378:	22af      	movs	r2, #175	@ 0xaf
 800137a:	2100      	movs	r1, #0
 800137c:	2078      	movs	r0, #120	@ 0x78
 800137e:	f000 f9f5 	bl	800176c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001382:	222e      	movs	r2, #46	@ 0x2e
 8001384:	2100      	movs	r1, #0
 8001386:	2078      	movs	r0, #120	@ 0x78
 8001388:	f000 f9f0 	bl	800176c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800138c:	2000      	movs	r0, #0
 800138e:	f000 f843 	bl	8001418 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001392:	f000 f813 	bl	80013bc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <SSD1306_Init+0x184>)
 8001398:	2200      	movs	r2, #0
 800139a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <SSD1306_Init+0x184>)
 800139e:	2200      	movs	r2, #0
 80013a0:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80013a2:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <SSD1306_Init+0x184>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000088 	.word	0x20000088
 80013b8:	200005f4 	.word	0x200005f4

080013bc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	71fb      	strb	r3, [r7, #7]
 80013c6:	e01d      	b.n	8001404 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	3b50      	subs	r3, #80	@ 0x50
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	461a      	mov	r2, r3
 80013d0:	2100      	movs	r1, #0
 80013d2:	2078      	movs	r0, #120	@ 0x78
 80013d4:	f000 f9ca 	bl	800176c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80013d8:	2200      	movs	r2, #0
 80013da:	2100      	movs	r1, #0
 80013dc:	2078      	movs	r0, #120	@ 0x78
 80013de:	f000 f9c5 	bl	800176c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80013e2:	2210      	movs	r2, #16
 80013e4:	2100      	movs	r1, #0
 80013e6:	2078      	movs	r0, #120	@ 0x78
 80013e8:	f000 f9c0 	bl	800176c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	01db      	lsls	r3, r3, #7
 80013f0:	4a08      	ldr	r2, [pc, #32]	@ (8001414 <SSD1306_UpdateScreen+0x58>)
 80013f2:	441a      	add	r2, r3
 80013f4:	2380      	movs	r3, #128	@ 0x80
 80013f6:	2140      	movs	r1, #64	@ 0x40
 80013f8:	2078      	movs	r0, #120	@ 0x78
 80013fa:	f000 f951 	bl	80016a0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	3301      	adds	r3, #1
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	2b07      	cmp	r3, #7
 8001408:	d9de      	bls.n	80013c8 <SSD1306_UpdateScreen+0xc>
	}
}
 800140a:	bf00      	nop
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200001f4 	.word	0x200001f4

08001418 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <SSD1306_Fill+0x14>
 8001428:	2300      	movs	r3, #0
 800142a:	e000      	b.n	800142e <SSD1306_Fill+0x16>
 800142c:	23ff      	movs	r3, #255	@ 0xff
 800142e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001432:	4619      	mov	r1, r3
 8001434:	4803      	ldr	r0, [pc, #12]	@ (8001444 <SSD1306_Fill+0x2c>)
 8001436:	f002 fac7 	bl	80039c8 <memset>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001f4 	.word	0x200001f4

08001448 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	80fb      	strh	r3, [r7, #6]
 8001452:	460b      	mov	r3, r1
 8001454:	80bb      	strh	r3, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	70fb      	strb	r3, [r7, #3]
	if (
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	2b7f      	cmp	r3, #127	@ 0x7f
 800145e:	d848      	bhi.n	80014f2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	2b3f      	cmp	r3, #63	@ 0x3f
 8001464:	d845      	bhi.n	80014f2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001466:	4b25      	ldr	r3, [pc, #148]	@ (80014fc <SSD1306_DrawPixel+0xb4>)
 8001468:	791b      	ldrb	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf0c      	ite	eq
 8001474:	2301      	moveq	r3, #1
 8001476:	2300      	movne	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d11a      	bne.n	80014b8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001482:	88fa      	ldrh	r2, [r7, #6]
 8001484:	88bb      	ldrh	r3, [r7, #4]
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	b298      	uxth	r0, r3
 800148a:	4603      	mov	r3, r0
 800148c:	01db      	lsls	r3, r3, #7
 800148e:	4413      	add	r3, r2
 8001490:	4a1b      	ldr	r2, [pc, #108]	@ (8001500 <SSD1306_DrawPixel+0xb8>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	b25a      	sxtb	r2, r3
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	2101      	movs	r1, #1
 800149e:	fa01 f303 	lsl.w	r3, r1, r3
 80014a2:	b25b      	sxtb	r3, r3
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b259      	sxtb	r1, r3
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	4603      	mov	r3, r0
 80014ac:	01db      	lsls	r3, r3, #7
 80014ae:	4413      	add	r3, r2
 80014b0:	b2c9      	uxtb	r1, r1
 80014b2:	4a13      	ldr	r2, [pc, #76]	@ (8001500 <SSD1306_DrawPixel+0xb8>)
 80014b4:	54d1      	strb	r1, [r2, r3]
 80014b6:	e01d      	b.n	80014f4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80014b8:	88fa      	ldrh	r2, [r7, #6]
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	08db      	lsrs	r3, r3, #3
 80014be:	b298      	uxth	r0, r3
 80014c0:	4603      	mov	r3, r0
 80014c2:	01db      	lsls	r3, r3, #7
 80014c4:	4413      	add	r3, r2
 80014c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <SSD1306_DrawPixel+0xb8>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	b25a      	sxtb	r2, r3
 80014cc:	88bb      	ldrh	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	2101      	movs	r1, #1
 80014d4:	fa01 f303 	lsl.w	r3, r1, r3
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	4013      	ands	r3, r2
 80014e0:	b259      	sxtb	r1, r3
 80014e2:	88fa      	ldrh	r2, [r7, #6]
 80014e4:	4603      	mov	r3, r0
 80014e6:	01db      	lsls	r3, r3, #7
 80014e8:	4413      	add	r3, r2
 80014ea:	b2c9      	uxtb	r1, r1
 80014ec:	4a04      	ldr	r2, [pc, #16]	@ (8001500 <SSD1306_DrawPixel+0xb8>)
 80014ee:	54d1      	strb	r1, [r2, r3]
 80014f0:	e000      	b.n	80014f4 <SSD1306_DrawPixel+0xac>
		return;
 80014f2:	bf00      	nop
	}
}
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	200005f4 	.word	0x200005f4
 8001500:	200001f4 	.word	0x200001f4

08001504 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	460a      	mov	r2, r1
 800150e:	80fb      	strh	r3, [r7, #6]
 8001510:	4613      	mov	r3, r2
 8001512:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001514:	4a05      	ldr	r2, [pc, #20]	@ (800152c <SSD1306_GotoXY+0x28>)
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800151a:	4a04      	ldr	r2, [pc, #16]	@ (800152c <SSD1306_GotoXY+0x28>)
 800151c:	88bb      	ldrh	r3, [r7, #4]
 800151e:	8053      	strh	r3, [r2, #2]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200005f4 	.word	0x200005f4

08001530 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001540:	4b39      	ldr	r3, [pc, #228]	@ (8001628 <SSD1306_Putc+0xf8>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	461a      	mov	r2, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4413      	add	r3, r2
	if (
 800154c:	2b7f      	cmp	r3, #127	@ 0x7f
 800154e:	dc07      	bgt.n	8001560 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001550:	4b35      	ldr	r3, [pc, #212]	@ (8001628 <SSD1306_Putc+0xf8>)
 8001552:	885b      	ldrh	r3, [r3, #2]
 8001554:	461a      	mov	r2, r3
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	785b      	ldrb	r3, [r3, #1]
 800155a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800155c:	2b3f      	cmp	r3, #63	@ 0x3f
 800155e:	dd01      	ble.n	8001564 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001560:	2300      	movs	r3, #0
 8001562:	e05d      	b.n	8001620 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e04b      	b.n	8001602 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	3b20      	subs	r3, #32
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	7849      	ldrb	r1, [r1, #1]
 8001576:	fb01 f303 	mul.w	r3, r1, r3
 800157a:	4619      	mov	r1, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	440b      	add	r3, r1
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	e030      	b.n	80015f0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d010      	beq.n	80015c0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800159e:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <SSD1306_Putc+0xf8>)
 80015a0:	881a      	ldrh	r2, [r3, #0]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	b298      	uxth	r0, r3
 80015aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <SSD1306_Putc+0xf8>)
 80015ac:	885a      	ldrh	r2, [r3, #2]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	4413      	add	r3, r2
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	79ba      	ldrb	r2, [r7, #6]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff ff45 	bl	8001448 <SSD1306_DrawPixel>
 80015be:	e014      	b.n	80015ea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80015c0:	4b19      	ldr	r3, [pc, #100]	@ (8001628 <SSD1306_Putc+0xf8>)
 80015c2:	881a      	ldrh	r2, [r3, #0]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	4413      	add	r3, r2
 80015ca:	b298      	uxth	r0, r3
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <SSD1306_Putc+0xf8>)
 80015ce:	885a      	ldrh	r2, [r3, #2]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4413      	add	r3, r2
 80015d6:	b299      	uxth	r1, r3
 80015d8:	79bb      	ldrb	r3, [r7, #6]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	bf0c      	ite	eq
 80015de:	2301      	moveq	r3, #1
 80015e0:	2300      	movne	r3, #0
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	f7ff ff2f 	bl	8001448 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	3301      	adds	r3, #1
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d3c8      	bcc.n	800158e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	3301      	adds	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	785b      	ldrb	r3, [r3, #1]
 8001606:	461a      	mov	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	4293      	cmp	r3, r2
 800160c:	d3ad      	bcc.n	800156a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <SSD1306_Putc+0xf8>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	4413      	add	r3, r2
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <SSD1306_Putc+0xf8>)
 800161c:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800161e:	79fb      	ldrb	r3, [r7, #7]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200005f4 	.word	0x200005f4

0800162c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	4613      	mov	r3, r2
 8001638:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800163a:	e012      	b.n	8001662 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	79fa      	ldrb	r2, [r7, #7]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff73 	bl	8001530 <SSD1306_Putc>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d002      	beq.n	800165c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	e008      	b.n	800166e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3301      	adds	r3, #1
 8001660:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1e8      	bne.n	800163c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	781b      	ldrb	r3, [r3, #0]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <ssd1306_I2C_Init+0x24>)
 8001680:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001682:	e002      	b.n	800168a <ssd1306_I2C_Init+0x12>
		p--;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	3b01      	subs	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
	while(p>0)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f9      	bne.n	8001684 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	0003d090 	.word	0x0003d090

080016a0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b0c7      	sub	sp, #284	@ 0x11c
 80016a4:	af02      	add	r7, sp, #8
 80016a6:	4604      	mov	r4, r0
 80016a8:	4608      	mov	r0, r1
 80016aa:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80016ae:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80016b2:	600a      	str	r2, [r1, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016ba:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80016be:	4622      	mov	r2, r4
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c6:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80016ca:	4602      	mov	r2, r0
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016d6:	460a      	mov	r2, r1
 80016d8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80016da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016e2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016e6:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80016ea:	7812      	ldrb	r2, [r2, #0]
 80016ec:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016f4:	e015      	b.n	8001722 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80016f6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016fa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016fe:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	441a      	add	r2, r3
 8001706:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800170a:	3301      	adds	r3, #1
 800170c:	7811      	ldrb	r1, [r2, #0]
 800170e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001712:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001716:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001718:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800171c:	3301      	adds	r3, #1
 800171e:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001722:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001726:	b29b      	uxth	r3, r3
 8001728:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800172c:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001730:	8812      	ldrh	r2, [r2, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d8df      	bhi.n	80016f6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001736:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800173a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	b299      	uxth	r1, r3
 8001742:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001746:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	b29b      	uxth	r3, r3
 8001750:	f107 020c 	add.w	r2, r7, #12
 8001754:	200a      	movs	r0, #10
 8001756:	9000      	str	r0, [sp, #0]
 8001758:	4803      	ldr	r0, [pc, #12]	@ (8001768 <ssd1306_I2C_WriteMulti+0xc8>)
 800175a:	f000 fddb 	bl	8002314 <HAL_I2C_Master_Transmit>
}
 800175e:	bf00      	nop
 8001760:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001764:	46bd      	mov	sp, r7
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	20000088 	.word	0x20000088

0800176c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af02      	add	r7, sp, #8
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	460b      	mov	r3, r1
 8001778:	71bb      	strb	r3, [r7, #6]
 800177a:	4613      	mov	r3, r2
 800177c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800177e:	79bb      	ldrb	r3, [r7, #6]
 8001780:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001782:	797b      	ldrb	r3, [r7, #5]
 8001784:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	b299      	uxth	r1, r3
 800178a:	f107 020c 	add.w	r2, r7, #12
 800178e:	230a      	movs	r3, #10
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2302      	movs	r3, #2
 8001794:	4803      	ldr	r0, [pc, #12]	@ (80017a4 <ssd1306_I2C_Write+0x38>)
 8001796:	f000 fdbd 	bl	8002314 <HAL_I2C_Master_Transmit>
}
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000088 	.word	0x20000088

080017a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <HAL_MspInit+0x5c>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <HAL_MspInit+0x5c>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6193      	str	r3, [r2, #24]
 80017ba:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_MspInit+0x5c>)
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <HAL_MspInit+0x5c>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <HAL_MspInit+0x5c>)
 80017cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <HAL_MspInit+0x5c>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017de:	4b0a      	ldr	r3, [pc, #40]	@ (8001808 <HAL_MspInit+0x60>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <HAL_MspInit+0x60>)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	40021000 	.word	0x40021000
 8001808:	40010000 	.word	0x40010000

0800180c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	@ 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1d      	ldr	r2, [pc, #116]	@ (800189c <HAL_I2C_MspInit+0x90>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d132      	bne.n	8001892 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182c:	4b1c      	ldr	r3, [pc, #112]	@ (80018a0 <HAL_I2C_MspInit+0x94>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a1b      	ldr	r2, [pc, #108]	@ (80018a0 <HAL_I2C_MspInit+0x94>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6193      	str	r3, [r2, #24]
 8001838:	4b19      	ldr	r3, [pc, #100]	@ (80018a0 <HAL_I2C_MspInit+0x94>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001844:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	2303      	movs	r3, #3
 8001850:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	4812      	ldr	r0, [pc, #72]	@ (80018a4 <HAL_I2C_MspInit+0x98>)
 800185a:	f000 fa63 	bl	8001d24 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_I2C_MspInit+0x9c>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
 8001864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001866:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
 800186c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
 8001874:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <HAL_I2C_MspInit+0x9c>)
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <HAL_I2C_MspInit+0x94>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4a08      	ldr	r2, [pc, #32]	@ (80018a0 <HAL_I2C_MspInit+0x94>)
 8001880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001884:	61d3      	str	r3, [r2, #28]
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_I2C_MspInit+0x94>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001892:	bf00      	nop
 8001894:	3728      	adds	r7, #40	@ 0x28
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40005400 	.word	0x40005400
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010c00 	.word	0x40010c00
 80018a8:	40010000 	.word	0x40010000

080018ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001928 <HAL_TIM_Base_MspInit+0x7c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d10c      	bne.n	80018d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_TIM_Base_MspInit+0x80>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	4a1a      	ldr	r2, [pc, #104]	@ (800192c <HAL_TIM_Base_MspInit+0x80>)
 80018c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018c8:	6193      	str	r3, [r2, #24]
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_TIM_Base_MspInit+0x80>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018d6:	e022      	b.n	800191e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e0:	d10c      	bne.n	80018fc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e2:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_TIM_Base_MspInit+0x80>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4a11      	ldr	r2, [pc, #68]	@ (800192c <HAL_TIM_Base_MspInit+0x80>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	61d3      	str	r3, [r2, #28]
 80018ee:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <HAL_TIM_Base_MspInit+0x80>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
}
 80018fa:	e010      	b.n	800191e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0b      	ldr	r2, [pc, #44]	@ (8001930 <HAL_TIM_Base_MspInit+0x84>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10b      	bne.n	800191e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001906:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_TIM_Base_MspInit+0x80>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	4a08      	ldr	r2, [pc, #32]	@ (800192c <HAL_TIM_Base_MspInit+0x80>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	61d3      	str	r3, [r2, #28]
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_TIM_Base_MspInit+0x80>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	60fb      	str	r3, [r7, #12]
 800191c:	68fb      	ldr	r3, [r7, #12]
}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	40012c00 	.word	0x40012c00
 800192c:	40021000 	.word	0x40021000
 8001930:	40000400 	.word	0x40000400

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <NMI_Handler+0x4>

0800193c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <MemManage_Handler+0x4>

0800194c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <BusFault_Handler+0x4>

08001954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <UsageFault_Handler+0x4>

0800195c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	bc80      	pop	{r7}
 8001966:	4770      	bx	lr

08001968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 f8aa 	bl	8001adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f002 f80c 	bl	80039d8 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20005000 	.word	0x20005000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	200005fc 	.word	0x200005fc
 80019f4:	20000750 	.word	0x20000750

080019f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff fff8 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a0a:	490c      	ldr	r1, [pc, #48]	@ (8001a3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a20:	4c09      	ldr	r4, [pc, #36]	@ (8001a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f001 ffd9 	bl	80039e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a32:	f7fe ff7b 	bl	800092c <main>
  bx lr
 8001a36:	4770      	bx	lr
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001a40:	08006424 	.word	0x08006424
  ldr r2, =_sbss
 8001a44:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001a48:	2000074c 	.word	0x2000074c

08001a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_2_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_Init+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <HAL_Init+0x28>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f92b 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f808 	bl	8001a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fe9c 	bl	80017a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000

08001a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <HAL_InitTick+0x54>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_InitTick+0x58>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f935 	bl	8001d0a <HAL_SYSTICK_Config>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00e      	b.n	8001ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d80a      	bhi.n	8001ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f90b 	bl	8001cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001abc:	4a06      	ldr	r2, [pc, #24]	@ (8001ad8 <HAL_InitTick+0x5c>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000010 	.word	0x20000010
 8001ad4:	20000018 	.word	0x20000018
 8001ad8:	20000014 	.word	0x20000014

08001adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_IncTick+0x1c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_IncTick+0x20>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	4a03      	ldr	r2, [pc, #12]	@ (8001afc <HAL_IncTick+0x20>)
 8001aee:	6013      	str	r3, [r2, #0]
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000018 	.word	0x20000018
 8001afc:	20000600 	.word	0x20000600

08001b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  return uwTick;
 8001b04:	4b02      	ldr	r3, [pc, #8]	@ (8001b10 <HAL_GetTick+0x10>)
 8001b06:	681b      	ldr	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr
 8001b10:	20000600 	.word	0x20000600

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff fff0 	bl	8001b00 <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d005      	beq.n	8001b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_Delay+0x44>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff ffe0 	bl	8001b00 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8f7      	bhi.n	8001b3c <HAL_Delay+0x28>
  {
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000018 	.word	0x20000018

08001b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	68ba      	ldr	r2, [r7, #8]
 8001b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8e:	4a04      	ldr	r2, [pc, #16]	@ (8001ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	60d3      	str	r3, [r2, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db0a      	blt.n	8001bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	490c      	ldr	r1, [pc, #48]	@ (8001c0c <__NVIC_SetPriority+0x4c>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	440b      	add	r3, r1
 8001be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be8:	e00a      	b.n	8001c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4908      	ldr	r1, [pc, #32]	@ (8001c10 <__NVIC_SetPriority+0x50>)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	3b04      	subs	r3, #4
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	b2d2      	uxtb	r2, r2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	761a      	strb	r2, [r3, #24]
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	@ 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f1c3 0307 	rsb	r3, r3, #7
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	bf28      	it	cs
 8001c32:	2304      	movcs	r3, #4
 8001c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3304      	adds	r3, #4
 8001c3a:	2b06      	cmp	r3, #6
 8001c3c:	d902      	bls.n	8001c44 <NVIC_EncodePriority+0x30>
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3b03      	subs	r3, #3
 8001c42:	e000      	b.n	8001c46 <NVIC_EncodePriority+0x32>
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	f04f 32ff 	mov.w	r2, #4294967295
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43da      	mvns	r2, r3
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	401a      	ands	r2, r3
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	fa01 f303 	lsl.w	r3, r1, r3
 8001c66:	43d9      	mvns	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	4313      	orrs	r3, r2
         );
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c88:	d301      	bcc.n	8001c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00f      	b.n	8001cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb8 <SysTick_Config+0x40>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3b01      	subs	r3, #1
 8001c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c96:	210f      	movs	r1, #15
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295
 8001c9c:	f7ff ff90 	bl	8001bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca0:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <SysTick_Config+0x40>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca6:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <SysTick_Config+0x40>)
 8001ca8:	2207      	movs	r2, #7
 8001caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	e000e010 	.word	0xe000e010

08001cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff49 	bl	8001b5c <__NVIC_SetPriorityGrouping>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce4:	f7ff ff5e 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	6978      	ldr	r0, [r7, #20]
 8001cf0:	f7ff ff90 	bl	8001c14 <NVIC_EncodePriority>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff5f 	bl	8001bc0 <__NVIC_SetPriority>
}
 8001d02:	bf00      	nop
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ffb0 	bl	8001c78 <SysTick_Config>
 8001d18:	4603      	mov	r3, r0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b08b      	sub	sp, #44	@ 0x2c
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d36:	e169      	b.n	800200c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8158 	bne.w	8002006 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a9a      	ldr	r2, [pc, #616]	@ (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d05e      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d60:	4a98      	ldr	r2, [pc, #608]	@ (8001fc4 <HAL_GPIO_Init+0x2a0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d875      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d66:	4a98      	ldr	r2, [pc, #608]	@ (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d058      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d6c:	4a96      	ldr	r2, [pc, #600]	@ (8001fc8 <HAL_GPIO_Init+0x2a4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d86f      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d72:	4a96      	ldr	r2, [pc, #600]	@ (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d052      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d78:	4a94      	ldr	r2, [pc, #592]	@ (8001fcc <HAL_GPIO_Init+0x2a8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d869      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d7e:	4a94      	ldr	r2, [pc, #592]	@ (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d04c      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d84:	4a92      	ldr	r2, [pc, #584]	@ (8001fd0 <HAL_GPIO_Init+0x2ac>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d863      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d8a:	4a92      	ldr	r2, [pc, #584]	@ (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d046      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
 8001d90:	4a90      	ldr	r2, [pc, #576]	@ (8001fd4 <HAL_GPIO_Init+0x2b0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d85d      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d96:	2b12      	cmp	r3, #18
 8001d98:	d82a      	bhi.n	8001df0 <HAL_GPIO_Init+0xcc>
 8001d9a:	2b12      	cmp	r3, #18
 8001d9c:	d859      	bhi.n	8001e52 <HAL_GPIO_Init+0x12e>
 8001d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8001da4 <HAL_GPIO_Init+0x80>)
 8001da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da4:	08001e1f 	.word	0x08001e1f
 8001da8:	08001df9 	.word	0x08001df9
 8001dac:	08001e0b 	.word	0x08001e0b
 8001db0:	08001e4d 	.word	0x08001e4d
 8001db4:	08001e53 	.word	0x08001e53
 8001db8:	08001e53 	.word	0x08001e53
 8001dbc:	08001e53 	.word	0x08001e53
 8001dc0:	08001e53 	.word	0x08001e53
 8001dc4:	08001e53 	.word	0x08001e53
 8001dc8:	08001e53 	.word	0x08001e53
 8001dcc:	08001e53 	.word	0x08001e53
 8001dd0:	08001e53 	.word	0x08001e53
 8001dd4:	08001e53 	.word	0x08001e53
 8001dd8:	08001e53 	.word	0x08001e53
 8001ddc:	08001e53 	.word	0x08001e53
 8001de0:	08001e53 	.word	0x08001e53
 8001de4:	08001e53 	.word	0x08001e53
 8001de8:	08001e01 	.word	0x08001e01
 8001dec:	08001e15 	.word	0x08001e15
 8001df0:	4a79      	ldr	r2, [pc, #484]	@ (8001fd8 <HAL_GPIO_Init+0x2b4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001df6:	e02c      	b.n	8001e52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	623b      	str	r3, [r7, #32]
          break;
 8001dfe:	e029      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	3304      	adds	r3, #4
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e024      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	3308      	adds	r3, #8
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e01f      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	623b      	str	r3, [r7, #32]
          break;
 8001e1c:	e01a      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e26:	2304      	movs	r3, #4
 8001e28:	623b      	str	r3, [r7, #32]
          break;
 8001e2a:	e013      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e34:	2308      	movs	r3, #8
 8001e36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	611a      	str	r2, [r3, #16]
          break;
 8001e3e:	e009      	b.n	8001e54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e40:	2308      	movs	r3, #8
 8001e42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	615a      	str	r2, [r3, #20]
          break;
 8001e4a:	e003      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
          break;
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x130>
          break;
 8001e52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	@ 0xff
 8001e58:	d801      	bhi.n	8001e5e <HAL_GPIO_Init+0x13a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	e001      	b.n	8001e62 <HAL_GPIO_Init+0x13e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2bff      	cmp	r3, #255	@ 0xff
 8001e68:	d802      	bhi.n	8001e70 <HAL_GPIO_Init+0x14c>
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	e002      	b.n	8001e76 <HAL_GPIO_Init+0x152>
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	3b08      	subs	r3, #8
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	210f      	movs	r1, #15
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	6a39      	ldr	r1, [r7, #32]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	431a      	orrs	r2, r3
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80b1 	beq.w	8002006 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	@ (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8001fdc <HAL_GPIO_Init+0x2b8>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ebc:	4a48      	ldr	r2, [pc, #288]	@ (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	220f      	movs	r2, #15
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4013      	ands	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a40      	ldr	r2, [pc, #256]	@ (8001fe4 <HAL_GPIO_Init+0x2c0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d013      	beq.n	8001f10 <HAL_GPIO_Init+0x1ec>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a3f      	ldr	r2, [pc, #252]	@ (8001fe8 <HAL_GPIO_Init+0x2c4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d00d      	beq.n	8001f0c <HAL_GPIO_Init+0x1e8>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fec <HAL_GPIO_Init+0x2c8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d007      	beq.n	8001f08 <HAL_GPIO_Init+0x1e4>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a3d      	ldr	r2, [pc, #244]	@ (8001ff0 <HAL_GPIO_Init+0x2cc>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_GPIO_Init+0x1e0>
 8001f00:	2303      	movs	r3, #3
 8001f02:	e006      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f04:	2304      	movs	r3, #4
 8001f06:	e004      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e002      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_GPIO_Init+0x1ee>
 8001f10:	2300      	movs	r3, #0
 8001f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f14:	f002 0203 	and.w	r2, r2, #3
 8001f18:	0092      	lsls	r2, r2, #2
 8001f1a:	4093      	lsls	r3, r2
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f22:	492f      	ldr	r1, [pc, #188]	@ (8001fe0 <HAL_GPIO_Init+0x2bc>)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	089b      	lsrs	r3, r3, #2
 8001f28:	3302      	adds	r3, #2
 8001f2a:	68fa      	ldr	r2, [r7, #12]
 8001f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d006      	beq.n	8001f4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	492c      	ldr	r1, [pc, #176]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4928      	ldr	r1, [pc, #160]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d006      	beq.n	8001f72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f64:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	4922      	ldr	r1, [pc, #136]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f72:	4b20      	ldr	r3, [pc, #128]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	491e      	ldr	r1, [pc, #120]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d006      	beq.n	8001f9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4918      	ldr	r1, [pc, #96]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
 8001f98:	e006      	b.n	8001fa8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	4914      	ldr	r1, [pc, #80]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d021      	beq.n	8001ff8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	490e      	ldr	r1, [pc, #56]	@ (8001ff4 <HAL_GPIO_Init+0x2d0>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e021      	b.n	8002006 <HAL_GPIO_Init+0x2e2>
 8001fc2:	bf00      	nop
 8001fc4:	10320000 	.word	0x10320000
 8001fc8:	10310000 	.word	0x10310000
 8001fcc:	10220000 	.word	0x10220000
 8001fd0:	10210000 	.word	0x10210000
 8001fd4:	10120000 	.word	0x10120000
 8001fd8:	10110000 	.word	0x10110000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	40010c00 	.word	0x40010c00
 8001fec:	40011000 	.word	0x40011000
 8001ff0:	40011400 	.word	0x40011400
 8001ff4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	43db      	mvns	r3, r3
 8002000:	4909      	ldr	r1, [pc, #36]	@ (8002028 <HAL_GPIO_Init+0x304>)
 8002002:	4013      	ands	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	3301      	adds	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	fa22 f303 	lsr.w	r3, r2, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	f47f ae8e 	bne.w	8001d38 <HAL_GPIO_Init+0x14>
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	372c      	adds	r7, #44	@ 0x2c
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40010400 	.word	0x40010400

0800202c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	887b      	ldrh	r3, [r7, #2]
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d002      	beq.n	800204a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002044:	2301      	movs	r3, #1
 8002046:	73fb      	strb	r3, [r7, #15]
 8002048:	e001      	b.n	800204e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bc80      	pop	{r7}
 8002058:	4770      	bx	lr

0800205a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	460b      	mov	r3, r1
 8002064:	807b      	strh	r3, [r7, #2]
 8002066:	4613      	mov	r3, r2
 8002068:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800206a:	787b      	ldrb	r3, [r7, #1]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002070:	887a      	ldrh	r2, [r7, #2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002076:	e003      	b.n	8002080 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002078:	887b      	ldrh	r3, [r7, #2]
 800207a:	041a      	lsls	r2, r3, #16
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	611a      	str	r2, [r3, #16]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr
	...

0800208c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e12b      	b.n	80022f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d106      	bne.n	80020b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fbaa 	bl	800180c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2224      	movs	r2, #36	@ 0x24
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020f0:	f001 f960 	bl	80033b4 <HAL_RCC_GetPCLK1Freq>
 80020f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	4a81      	ldr	r2, [pc, #516]	@ (8002300 <HAL_I2C_Init+0x274>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d807      	bhi.n	8002110 <HAL_I2C_Init+0x84>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a80      	ldr	r2, [pc, #512]	@ (8002304 <HAL_I2C_Init+0x278>)
 8002104:	4293      	cmp	r3, r2
 8002106:	bf94      	ite	ls
 8002108:	2301      	movls	r3, #1
 800210a:	2300      	movhi	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	e006      	b.n	800211e <HAL_I2C_Init+0x92>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	4a7d      	ldr	r2, [pc, #500]	@ (8002308 <HAL_I2C_Init+0x27c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	bf94      	ite	ls
 8002118:	2301      	movls	r3, #1
 800211a:	2300      	movhi	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e0e7      	b.n	80022f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	4a78      	ldr	r2, [pc, #480]	@ (800230c <HAL_I2C_Init+0x280>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0c9b      	lsrs	r3, r3, #18
 8002130:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a6a      	ldr	r2, [pc, #424]	@ (8002300 <HAL_I2C_Init+0x274>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d802      	bhi.n	8002160 <HAL_I2C_Init+0xd4>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	3301      	adds	r3, #1
 800215e:	e009      	b.n	8002174 <HAL_I2C_Init+0xe8>
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002166:	fb02 f303 	mul.w	r3, r2, r3
 800216a:	4a69      	ldr	r2, [pc, #420]	@ (8002310 <HAL_I2C_Init+0x284>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	099b      	lsrs	r3, r3, #6
 8002172:	3301      	adds	r3, #1
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	430b      	orrs	r3, r1
 800217a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002186:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	495c      	ldr	r1, [pc, #368]	@ (8002300 <HAL_I2C_Init+0x274>)
 8002190:	428b      	cmp	r3, r1
 8002192:	d819      	bhi.n	80021c8 <HAL_I2C_Init+0x13c>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	1e59      	subs	r1, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	fbb1 f3f3 	udiv	r3, r1, r3
 80021a2:	1c59      	adds	r1, r3, #1
 80021a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021a8:	400b      	ands	r3, r1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_I2C_Init+0x138>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e59      	subs	r1, r3, #1
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c2:	e051      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 80021c4:	2304      	movs	r3, #4
 80021c6:	e04f      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d111      	bne.n	80021f4 <HAL_I2C_Init+0x168>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1e58      	subs	r0, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	460b      	mov	r3, r1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	440b      	add	r3, r1
 80021de:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e2:	3301      	adds	r3, #1
 80021e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf0c      	ite	eq
 80021ec:	2301      	moveq	r3, #1
 80021ee:	2300      	movne	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	e012      	b.n	800221a <HAL_I2C_Init+0x18e>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1e58      	subs	r0, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	0099      	lsls	r1, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	fbb0 f3f3 	udiv	r3, r0, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf0c      	ite	eq
 8002214:	2301      	moveq	r3, #1
 8002216:	2300      	movne	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Init+0x196>
 800221e:	2301      	movs	r3, #1
 8002220:	e022      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10e      	bne.n	8002248 <HAL_I2C_Init+0x1bc>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1e58      	subs	r0, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6859      	ldr	r1, [r3, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	440b      	add	r3, r1
 8002238:	fbb0 f3f3 	udiv	r3, r0, r3
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002246:	e00f      	b.n	8002268 <HAL_I2C_Init+0x1dc>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1e58      	subs	r0, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6859      	ldr	r1, [r3, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	440b      	add	r3, r1
 8002256:	0099      	lsls	r1, r3, #2
 8002258:	440b      	add	r3, r1
 800225a:	fbb0 f3f3 	udiv	r3, r0, r3
 800225e:	3301      	adds	r3, #1
 8002260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002264:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	6809      	ldr	r1, [r1, #0]
 800226c:	4313      	orrs	r3, r2
 800226e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002296:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6911      	ldr	r1, [r2, #16]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68d2      	ldr	r2, [r2, #12]
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	430b      	orrs	r3, r1
 80022aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2220      	movs	r2, #32
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	000186a0 	.word	0x000186a0
 8002304:	001e847f 	.word	0x001e847f
 8002308:	003d08ff 	.word	0x003d08ff
 800230c:	431bde83 	.word	0x431bde83
 8002310:	10624dd3 	.word	0x10624dd3

08002314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	461a      	mov	r2, r3
 8002320:	460b      	mov	r3, r1
 8002322:	817b      	strh	r3, [r7, #10]
 8002324:	4613      	mov	r3, r2
 8002326:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002328:	f7ff fbea 	bl	8001b00 <HAL_GetTick>
 800232c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b20      	cmp	r3, #32
 8002338:	f040 80e0 	bne.w	80024fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2319      	movs	r3, #25
 8002342:	2201      	movs	r2, #1
 8002344:	4970      	ldr	r1, [pc, #448]	@ (8002508 <HAL_I2C_Master_Transmit+0x1f4>)
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 fa92 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	e0d3      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_I2C_Master_Transmit+0x50>
 8002360:	2302      	movs	r3, #2
 8002362:	e0cc      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d007      	beq.n	800238a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002398:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2221      	movs	r2, #33	@ 0x21
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2210      	movs	r2, #16
 80023a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	893a      	ldrh	r2, [r7, #8]
 80023ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4a50      	ldr	r2, [pc, #320]	@ (800250c <HAL_I2C_Master_Transmit+0x1f8>)
 80023ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80023cc:	8979      	ldrh	r1, [r7, #10]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f000 f9ca 	bl	800276c <I2C_MasterRequestWrite>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e08d      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023f8:	e066      	b.n	80024c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	6a39      	ldr	r1, [r7, #32]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fb50 	bl	8002aa4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	2b04      	cmp	r3, #4
 8002410:	d107      	bne.n	8002422 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002420:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e06b      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b04      	cmp	r3, #4
 8002462:	d11b      	bne.n	800249c <HAL_I2C_Master_Transmit+0x188>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002468:	2b00      	cmp	r3, #0
 800246a:	d017      	beq.n	800249c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	781a      	ldrb	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002486:	b29b      	uxth	r3, r3
 8002488:	3b01      	subs	r3, #1
 800248a:	b29a      	uxth	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	6a39      	ldr	r1, [r7, #32]
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fb47 	bl	8002b34 <I2C_WaitOnBTFFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00d      	beq.n	80024c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d107      	bne.n	80024c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e01a      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d194      	bne.n	80023fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2220      	movs	r2, #32
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e000      	b.n	80024fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024fc:	2302      	movs	r3, #2
  }
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	00100002 	.word	0x00100002
 800250c:	ffff0000 	.word	0xffff0000

08002510 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	@ 0x28
 8002514:	af02      	add	r7, sp, #8
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	460b      	mov	r3, r1
 800251e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff faee 	bl	8001b00 <HAL_GetTick>
 8002524:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b20      	cmp	r3, #32
 8002534:	f040 8111 	bne.w	800275a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	9300      	str	r3, [sp, #0]
 800253c:	2319      	movs	r3, #25
 800253e:	2201      	movs	r2, #1
 8002540:	4988      	ldr	r1, [pc, #544]	@ (8002764 <HAL_I2C_IsDeviceReady+0x254>)
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f994 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
 8002550:	e104      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_I2C_IsDeviceReady+0x50>
 800255c:	2302      	movs	r3, #2
 800255e:	e0fd      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b01      	cmp	r3, #1
 8002574:	d007      	beq.n	8002586 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f042 0201 	orr.w	r2, r2, #1
 8002584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002594:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2224      	movs	r2, #36	@ 0x24
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a70      	ldr	r2, [pc, #448]	@ (8002768 <HAL_I2C_IsDeviceReady+0x258>)
 80025a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025b8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 f952 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00d      	beq.n	80025ee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025e0:	d103      	bne.n	80025ea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025e8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e0b6      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ee:	897b      	ldrh	r3, [r7, #10]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025fc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025fe:	f7ff fa7f 	bl	8001b00 <HAL_GetTick>
 8002602:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b02      	cmp	r3, #2
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002632:	e025      	b.n	8002680 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002634:	f7ff fa64 	bl	8001b00 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d302      	bcc.n	800264a <HAL_I2C_IsDeviceReady+0x13a>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	22a0      	movs	r2, #160	@ 0xa0
 800264e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	695b      	ldr	r3, [r3, #20]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b02      	cmp	r3, #2
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2ba0      	cmp	r3, #160	@ 0xa0
 800268a:	d005      	beq.n	8002698 <HAL_I2C_IsDeviceReady+0x188>
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_I2C_IsDeviceReady+0x188>
 8002692:	7dbb      	ldrb	r3, [r7, #22]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0cd      	beq.n	8002634 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d129      	bne.n	8002702 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026bc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	9300      	str	r3, [sp, #0]
 80026d8:	2319      	movs	r3, #25
 80026da:	2201      	movs	r2, #1
 80026dc:	4921      	ldr	r1, [pc, #132]	@ (8002764 <HAL_I2C_IsDeviceReady+0x254>)
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f8c6 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e036      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e02c      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002710:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800271a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	2319      	movs	r3, #25
 8002722:	2201      	movs	r2, #1
 8002724:	490f      	ldr	r1, [pc, #60]	@ (8002764 <HAL_I2C_IsDeviceReady+0x254>)
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f8a2 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e012      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	3301      	adds	r3, #1
 800273a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	f4ff af32 	bcc.w	80025aa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2220      	movs	r2, #32
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e000      	b.n	800275c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
  }
}
 800275c:	4618      	mov	r0, r3
 800275e:	3720      	adds	r7, #32
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	00100002 	.word	0x00100002
 8002768:	ffff0000 	.word	0xffff0000

0800276c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	460b      	mov	r3, r1
 800277a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d006      	beq.n	8002796 <I2C_MasterRequestWrite+0x2a>
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d003      	beq.n	8002796 <I2C_MasterRequestWrite+0x2a>
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002794:	d108      	bne.n	80027a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e00b      	b.n	80027c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	2b12      	cmp	r3, #18
 80027ae:	d107      	bne.n	80027c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80027be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f84f 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027e6:	d103      	bne.n	80027f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e035      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80027fc:	d108      	bne.n	8002810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027fe:	897b      	ldrh	r3, [r7, #10]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800280c:	611a      	str	r2, [r3, #16]
 800280e:	e01b      	b.n	8002848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002810:	897b      	ldrh	r3, [r7, #10]
 8002812:	11db      	asrs	r3, r3, #7
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0306 	and.w	r3, r3, #6
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f063 030f 	orn	r3, r3, #15
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	490e      	ldr	r1, [pc, #56]	@ (8002868 <I2C_MasterRequestWrite+0xfc>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f898 	bl	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e010      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4907      	ldr	r1, [pc, #28]	@ (800286c <I2C_MasterRequestWrite+0x100>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f888 	bl	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	00010008 	.word	0x00010008
 800286c:	00010002 	.word	0x00010002

08002870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002880:	e048      	b.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d044      	beq.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7ff f939 	bl	8001b00 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d139      	bne.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	0c1b      	lsrs	r3, r3, #16
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10d      	bne.n	80028c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	43da      	mvns	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4013      	ands	r3, r2
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	461a      	mov	r2, r3
 80028c4:	e00c      	b.n	80028e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	43da      	mvns	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	4013      	ands	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf0c      	ite	eq
 80028d8:	2301      	moveq	r3, #1
 80028da:	2300      	movne	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d116      	bne.n	8002914 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e023      	b.n	800295c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	0c1b      	lsrs	r3, r3, #16
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b01      	cmp	r3, #1
 800291c:	d10d      	bne.n	800293a <I2C_WaitOnFlagUntilTimeout+0xca>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	43da      	mvns	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	4013      	ands	r3, r2
 800292a:	b29b      	uxth	r3, r3
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	e00c      	b.n	8002954 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	43da      	mvns	r2, r3
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	4013      	ands	r3, r2
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	461a      	mov	r2, r3
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	429a      	cmp	r2, r3
 8002958:	d093      	beq.n	8002882 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3710      	adds	r7, #16
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002972:	e071      	b.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800297e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002982:	d123      	bne.n	80029cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002992:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800299c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	f043 0204 	orr.w	r2, r3, #4
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e067      	b.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d041      	beq.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d4:	f7ff f894 	bl	8001b00 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d302      	bcc.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d136      	bne.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10c      	bne.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	43da      	mvns	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4013      	ands	r3, r2
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	bf14      	ite	ne
 8002a06:	2301      	movne	r3, #1
 8002a08:	2300      	moveq	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	e00b      	b.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	43da      	mvns	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf14      	ite	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	2300      	moveq	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a44:	f043 0220 	orr.w	r2, r3, #32
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e021      	b.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	0c1b      	lsrs	r3, r3, #16
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10c      	bne.n	8002a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf14      	ite	ne
 8002a74:	2301      	movne	r3, #1
 8002a76:	2300      	moveq	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	e00b      	b.n	8002a94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	43da      	mvns	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f47f af6d 	bne.w	8002974 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ab0:	e034      	b.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f886 	bl	8002bc4 <I2C_IsAcknowledgeFailed>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e034      	b.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d028      	beq.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aca:	f7ff f819 	bl	8001b00 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d302      	bcc.n	8002ae0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d11d      	bne.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aea:	2b80      	cmp	r3, #128	@ 0x80
 8002aec:	d016      	beq.n	8002b1c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b08:	f043 0220 	orr.w	r2, r3, #32
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e007      	b.n	8002b2c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	2b80      	cmp	r3, #128	@ 0x80
 8002b28:	d1c3      	bne.n	8002ab2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b40:	e034      	b.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 f83e 	bl	8002bc4 <I2C_IsAcknowledgeFailed>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e034      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d028      	beq.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5a:	f7fe ffd1 	bl	8001b00 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d302      	bcc.n	8002b70 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d11d      	bne.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0304 	and.w	r3, r3, #4
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d016      	beq.n	8002bac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f043 0220 	orr.w	r2, r3, #32
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e007      	b.n	8002bbc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d1c3      	bne.n	8002b42 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bda:	d11b      	bne.n	8002c14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002be4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c00:	f043 0204 	orr.w	r2, r3, #4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr

08002c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e272      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8087 	beq.w	8002d4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c40:	4b92      	ldr	r3, [pc, #584]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 030c 	and.w	r3, r3, #12
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d00c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c4c:	4b8f      	ldr	r3, [pc, #572]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 030c 	and.w	r3, r3, #12
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d112      	bne.n	8002c7e <HAL_RCC_OscConfig+0x5e>
 8002c58:	4b8c      	ldr	r3, [pc, #560]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c64:	d10b      	bne.n	8002c7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c66:	4b89      	ldr	r3, [pc, #548]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d06c      	beq.n	8002d4c <HAL_RCC_OscConfig+0x12c>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d168      	bne.n	8002d4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e24c      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c86:	d106      	bne.n	8002c96 <HAL_RCC_OscConfig+0x76>
 8002c88:	4b80      	ldr	r3, [pc, #512]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a7f      	ldr	r2, [pc, #508]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	e02e      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x98>
 8002c9e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a7a      	ldr	r2, [pc, #488]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b78      	ldr	r3, [pc, #480]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a77      	ldr	r2, [pc, #476]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e01d      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0xbc>
 8002cc2:	4b72      	ldr	r3, [pc, #456]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a71      	ldr	r2, [pc, #452]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	4b6f      	ldr	r3, [pc, #444]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a6e      	ldr	r2, [pc, #440]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0xd4>
 8002cdc:	4b6b      	ldr	r3, [pc, #428]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002ce2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b68      	ldr	r3, [pc, #416]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a67      	ldr	r2, [pc, #412]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d013      	beq.n	8002d24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe ff00 	bl	8001b00 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d04:	f7fe fefc 	bl	8001b00 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	@ 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e200      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d16:	4b5d      	ldr	r3, [pc, #372]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCC_OscConfig+0xe4>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe feec 	bl	8001b00 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d2c:	f7fe fee8 	bl	8001b00 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	@ 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e1ec      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d3e:	4b53      	ldr	r3, [pc, #332]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x10c>
 8002d4a:	e000      	b.n	8002d4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d063      	beq.n	8002e22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d5a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00b      	beq.n	8002d7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d66:	4b49      	ldr	r3, [pc, #292]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d11c      	bne.n	8002dac <HAL_RCC_OscConfig+0x18c>
 8002d72:	4b46      	ldr	r3, [pc, #280]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d116      	bne.n	8002dac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	4b43      	ldr	r3, [pc, #268]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x176>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e1c0      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d96:	4b3d      	ldr	r3, [pc, #244]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4939      	ldr	r1, [pc, #228]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002daa:	e03a      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db4:	4b36      	ldr	r3, [pc, #216]	@ (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002db6:	2201      	movs	r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dba:	f7fe fea1 	bl	8001b00 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dc2:	f7fe fe9d 	bl	8001b00 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1a1      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4927      	ldr	r1, [pc, #156]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	600b      	str	r3, [r1, #0]
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002df6:	4b26      	ldr	r3, [pc, #152]	@ (8002e90 <HAL_RCC_OscConfig+0x270>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe fe80 	bl	8001b00 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e04:	f7fe fe7c 	bl	8001b00 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e180      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e16:	4b1d      	ldr	r3, [pc, #116]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d03a      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d019      	beq.n	8002e6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e36:	4b17      	ldr	r3, [pc, #92]	@ (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fe60 	bl	8001b00 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7fe fe5c 	bl	8001b00 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e160      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e56:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <HAL_RCC_OscConfig+0x26c>)
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e62:	2001      	movs	r0, #1
 8002e64:	f000 faba 	bl	80033dc <RCC_Delay>
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e94 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e70:	f7fe fe46 	bl	8001b00 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e76:	e00f      	b.n	8002e98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e78:	f7fe fe42 	bl	8001b00 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d908      	bls.n	8002e98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e146      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000
 8002e90:	42420000 	.word	0x42420000
 8002e94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e98:	4b92      	ldr	r3, [pc, #584]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e9      	bne.n	8002e78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 80a6 	beq.w	8002ffe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b8b      	ldr	r3, [pc, #556]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002eb8:	69db      	ldr	r3, [r3, #28]
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10d      	bne.n	8002ede <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b88      	ldr	r3, [pc, #544]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	4a87      	ldr	r2, [pc, #540]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	61d3      	str	r3, [r2, #28]
 8002ece:	4b85      	ldr	r3, [pc, #532]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	4b82      	ldr	r3, [pc, #520]	@ (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eea:	4b7f      	ldr	r3, [pc, #508]	@ (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a7e      	ldr	r2, [pc, #504]	@ (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fe03 	bl	8001b00 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efe:	f7fe fdff 	bl	8001b00 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	@ 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e103      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4b75      	ldr	r3, [pc, #468]	@ (80030e8 <HAL_RCC_OscConfig+0x4c8>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x312>
 8002f24:	4b6f      	ldr	r3, [pc, #444]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a6e      	ldr	r2, [pc, #440]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	e02d      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x334>
 8002f3a:	4b6a      	ldr	r3, [pc, #424]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	4a69      	ldr	r2, [pc, #420]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	f023 0301 	bic.w	r3, r3, #1
 8002f44:	6213      	str	r3, [r2, #32]
 8002f46:	4b67      	ldr	r3, [pc, #412]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	4a66      	ldr	r2, [pc, #408]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	6213      	str	r3, [r2, #32]
 8002f52:	e01c      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	2b05      	cmp	r3, #5
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x356>
 8002f5c:	4b61      	ldr	r3, [pc, #388]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	4a60      	ldr	r2, [pc, #384]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	6213      	str	r3, [r2, #32]
 8002f68:	4b5e      	ldr	r3, [pc, #376]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	4a5d      	ldr	r2, [pc, #372]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6213      	str	r3, [r2, #32]
 8002f74:	e00b      	b.n	8002f8e <HAL_RCC_OscConfig+0x36e>
 8002f76:	4b5b      	ldr	r3, [pc, #364]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	4a5a      	ldr	r2, [pc, #360]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	6213      	str	r3, [r2, #32]
 8002f82:	4b58      	ldr	r3, [pc, #352]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	4a57      	ldr	r2, [pc, #348]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002f88:	f023 0304 	bic.w	r3, r3, #4
 8002f8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe fdb3 	bl	8001b00 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f9c:	e00a      	b.n	8002fb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7fe fdaf 	bl	8001b00 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e0b1      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb4:	4b4b      	ldr	r3, [pc, #300]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0ee      	beq.n	8002f9e <HAL_RCC_OscConfig+0x37e>
 8002fc0:	e014      	b.n	8002fec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc2:	f7fe fd9d 	bl	8001b00 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	e00a      	b.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe fd99 	bl	8001b00 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e09b      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe0:	4b40      	ldr	r3, [pc, #256]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1ee      	bne.n	8002fca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d105      	bne.n	8002ffe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff2:	4b3c      	ldr	r3, [pc, #240]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8002ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	f000 8087 	beq.w	8003116 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003008:	4b36      	ldr	r3, [pc, #216]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d061      	beq.n	80030d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d146      	bne.n	80030aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800301c:	4b33      	ldr	r3, [pc, #204]	@ (80030ec <HAL_RCC_OscConfig+0x4cc>)
 800301e:	2200      	movs	r2, #0
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003022:	f7fe fd6d 	bl	8001b00 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800302a:	f7fe fd69 	bl	8001b00 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e06d      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800303c:	4b29      	ldr	r3, [pc, #164]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d1f0      	bne.n	800302a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003050:	d108      	bne.n	8003064 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003052:	4b24      	ldr	r3, [pc, #144]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	4921      	ldr	r1, [pc, #132]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003064:	4b1f      	ldr	r3, [pc, #124]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a19      	ldr	r1, [r3, #32]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	430b      	orrs	r3, r1
 8003076:	491b      	ldr	r1, [pc, #108]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_RCC_OscConfig+0x4cc>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fe fd3d 	bl	8001b00 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308a:	f7fe fd39 	bl	8001b00 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e03d      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800309c:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x46a>
 80030a8:	e035      	b.n	8003116 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030aa:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <HAL_RCC_OscConfig+0x4cc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b0:	f7fe fd26 	bl	8001b00 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7fe fd22 	bl	8001b00 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e026      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ca:	4b06      	ldr	r3, [pc, #24]	@ (80030e4 <HAL_RCC_OscConfig+0x4c4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x498>
 80030d6:	e01e      	b.n	8003116 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e019      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
 80030e4:	40021000 	.word	0x40021000
 80030e8:	40007000 	.word	0x40007000
 80030ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_RCC_OscConfig+0x500>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	429a      	cmp	r2, r3
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000

08003124 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e0d0      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003138:	4b6a      	ldr	r3, [pc, #424]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d910      	bls.n	8003168 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003146:	4b67      	ldr	r3, [pc, #412]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f023 0207 	bic.w	r2, r3, #7
 800314e:	4965      	ldr	r1, [pc, #404]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b63      	ldr	r3, [pc, #396]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e0b8      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d020      	beq.n	80031b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003180:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	4a58      	ldr	r2, [pc, #352]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800318a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0308 	and.w	r3, r3, #8
 8003194:	2b00      	cmp	r3, #0
 8003196:	d005      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003198:	4b53      	ldr	r3, [pc, #332]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a52      	ldr	r2, [pc, #328]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800319e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80031a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a4:	4b50      	ldr	r3, [pc, #320]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	494d      	ldr	r1, [pc, #308]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d040      	beq.n	8003244 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d107      	bne.n	80031da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	4b47      	ldr	r3, [pc, #284]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d115      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07f      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e2:	4b41      	ldr	r3, [pc, #260]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e073      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f2:	4b3d      	ldr	r3, [pc, #244]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e06b      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003202:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f023 0203 	bic.w	r2, r3, #3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	4936      	ldr	r1, [pc, #216]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	4313      	orrs	r3, r2
 8003212:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003214:	f7fe fc74 	bl	8001b00 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321a:	e00a      	b.n	8003232 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800321c:	f7fe fc70 	bl	8001b00 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800322a:	4293      	cmp	r3, r2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e053      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003232:	4b2d      	ldr	r3, [pc, #180]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 020c 	and.w	r2, r3, #12
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	429a      	cmp	r2, r3
 8003242:	d1eb      	bne.n	800321c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003244:	4b27      	ldr	r3, [pc, #156]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d210      	bcs.n	8003274 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003252:	4b24      	ldr	r3, [pc, #144]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f023 0207 	bic.w	r2, r3, #7
 800325a:	4922      	ldr	r1, [pc, #136]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	4313      	orrs	r3, r2
 8003260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003262:	4b20      	ldr	r3, [pc, #128]	@ (80032e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0307 	and.w	r3, r3, #7
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	429a      	cmp	r2, r3
 800326e:	d001      	beq.n	8003274 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e032      	b.n	80032da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	2b00      	cmp	r3, #0
 800327e:	d008      	beq.n	8003292 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4916      	ldr	r1, [pc, #88]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0308 	and.w	r3, r3, #8
 800329a:	2b00      	cmp	r3, #0
 800329c:	d009      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800329e:	4b12      	ldr	r3, [pc, #72]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	490e      	ldr	r1, [pc, #56]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032b2:	f000 f821 	bl	80032f8 <HAL_RCC_GetSysClockFreq>
 80032b6:	4602      	mov	r2, r0
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	490a      	ldr	r1, [pc, #40]	@ (80032ec <HAL_RCC_ClockConfig+0x1c8>)
 80032c4:	5ccb      	ldrb	r3, [r1, r3]
 80032c6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ca:	4a09      	ldr	r2, [pc, #36]	@ (80032f0 <HAL_RCC_ClockConfig+0x1cc>)
 80032cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ce:	4b09      	ldr	r3, [pc, #36]	@ (80032f4 <HAL_RCC_ClockConfig+0x1d0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fe fbd2 	bl	8001a7c <HAL_InitTick>

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40022000 	.word	0x40022000
 80032e8:	40021000 	.word	0x40021000
 80032ec:	080063bc 	.word	0x080063bc
 80032f0:	20000010 	.word	0x20000010
 80032f4:	20000014 	.word	0x20000014

080032f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032fe:	2300      	movs	r3, #0
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003312:	4b1e      	ldr	r3, [pc, #120]	@ (800338c <HAL_RCC_GetSysClockFreq+0x94>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b04      	cmp	r3, #4
 8003320:	d002      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x30>
 8003322:	2b08      	cmp	r3, #8
 8003324:	d003      	beq.n	800332e <HAL_RCC_GetSysClockFreq+0x36>
 8003326:	e027      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003328:	4b19      	ldr	r3, [pc, #100]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x98>)
 800332a:	613b      	str	r3, [r7, #16]
      break;
 800332c:	e027      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0c9b      	lsrs	r3, r3, #18
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	4a17      	ldr	r2, [pc, #92]	@ (8003394 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003346:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_RCC_GetSysClockFreq+0x94>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0c5b      	lsrs	r3, r3, #17
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	4a11      	ldr	r2, [pc, #68]	@ (8003398 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003352:	5cd3      	ldrb	r3, [r2, r3]
 8003354:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a0d      	ldr	r2, [pc, #52]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x98>)
 800335a:	fb03 f202 	mul.w	r2, r3, r2
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	fbb2 f3f3 	udiv	r3, r2, r3
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	e004      	b.n	8003372 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a0c      	ldr	r2, [pc, #48]	@ (800339c <HAL_RCC_GetSysClockFreq+0xa4>)
 800336c:	fb02 f303 	mul.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	613b      	str	r3, [r7, #16]
      break;
 8003376:	e002      	b.n	800337e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003378:	4b05      	ldr	r3, [pc, #20]	@ (8003390 <HAL_RCC_GetSysClockFreq+0x98>)
 800337a:	613b      	str	r3, [r7, #16]
      break;
 800337c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800337e:	693b      	ldr	r3, [r7, #16]
}
 8003380:	4618      	mov	r0, r3
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	007a1200 	.word	0x007a1200
 8003394:	080063d4 	.word	0x080063d4
 8003398:	080063e4 	.word	0x080063e4
 800339c:	003d0900 	.word	0x003d0900

080033a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033a4:	4b02      	ldr	r3, [pc, #8]	@ (80033b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	20000010 	.word	0x20000010

080033b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033b8:	f7ff fff2 	bl	80033a0 <HAL_RCC_GetHCLKFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	4b05      	ldr	r3, [pc, #20]	@ (80033d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	4903      	ldr	r1, [pc, #12]	@ (80033d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ca:	5ccb      	ldrb	r3, [r1, r3]
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000
 80033d8:	080063cc 	.word	0x080063cc

080033dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003410 <RCC_Delay+0x34>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003414 <RCC_Delay+0x38>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0a5b      	lsrs	r3, r3, #9
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	fb02 f303 	mul.w	r3, r2, r3
 80033f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033f8:	bf00      	nop
  }
  while (Delay --);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	60fa      	str	r2, [r7, #12]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1f9      	bne.n	80033f8 <RCC_Delay+0x1c>
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	20000010 	.word	0x20000010
 8003414:	10624dd3 	.word	0x10624dd3

08003418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e041      	b.n	80034ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fe fa34 	bl	80018ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f000 f940 	bl	80036dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d001      	beq.n	80034d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e032      	b.n	8003536 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a18      	ldr	r2, [pc, #96]	@ (8003540 <HAL_TIM_Base_Start+0x88>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_Base_Start+0x48>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ea:	d009      	beq.n	8003500 <HAL_TIM_Base_Start+0x48>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a14      	ldr	r2, [pc, #80]	@ (8003544 <HAL_TIM_Base_Start+0x8c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_Base_Start+0x48>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a13      	ldr	r2, [pc, #76]	@ (8003548 <HAL_TIM_Base_Start+0x90>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d010      	beq.n	8003534 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	e007      	b.n	8003534 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800

0800354c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_TIM_ConfigClockSource+0x1c>
 8003564:	2302      	movs	r3, #2
 8003566:	e0b4      	b.n	80036d2 <HAL_TIM_ConfigClockSource+0x186>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003586:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800358e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035a0:	d03e      	beq.n	8003620 <HAL_TIM_ConfigClockSource+0xd4>
 80035a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035a6:	f200 8087 	bhi.w	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ae:	f000 8086 	beq.w	80036be <HAL_TIM_ConfigClockSource+0x172>
 80035b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b6:	d87f      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035b8:	2b70      	cmp	r3, #112	@ 0x70
 80035ba:	d01a      	beq.n	80035f2 <HAL_TIM_ConfigClockSource+0xa6>
 80035bc:	2b70      	cmp	r3, #112	@ 0x70
 80035be:	d87b      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c0:	2b60      	cmp	r3, #96	@ 0x60
 80035c2:	d050      	beq.n	8003666 <HAL_TIM_ConfigClockSource+0x11a>
 80035c4:	2b60      	cmp	r3, #96	@ 0x60
 80035c6:	d877      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035c8:	2b50      	cmp	r3, #80	@ 0x50
 80035ca:	d03c      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0xfa>
 80035cc:	2b50      	cmp	r3, #80	@ 0x50
 80035ce:	d873      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d0:	2b40      	cmp	r3, #64	@ 0x40
 80035d2:	d058      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0x13a>
 80035d4:	2b40      	cmp	r3, #64	@ 0x40
 80035d6:	d86f      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035d8:	2b30      	cmp	r3, #48	@ 0x30
 80035da:	d064      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x15a>
 80035dc:	2b30      	cmp	r3, #48	@ 0x30
 80035de:	d86b      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d060      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x15a>
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d867      	bhi.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d05c      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x15a>
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d05a      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x15a>
 80035f0:	e062      	b.n	80036b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003602:	f000 f944 	bl	800388e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003614:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	609a      	str	r2, [r3, #8]
      break;
 800361e:	e04f      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003630:	f000 f92d 	bl	800388e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003642:	609a      	str	r2, [r3, #8]
      break;
 8003644:	e03c      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003652:	461a      	mov	r2, r3
 8003654:	f000 f8a4 	bl	80037a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2150      	movs	r1, #80	@ 0x50
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f8fb 	bl	800385a <TIM_ITRx_SetConfig>
      break;
 8003664:	e02c      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003672:	461a      	mov	r2, r3
 8003674:	f000 f8c2 	bl	80037fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2160      	movs	r1, #96	@ 0x60
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f8eb 	bl	800385a <TIM_ITRx_SetConfig>
      break;
 8003684:	e01c      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003692:	461a      	mov	r2, r3
 8003694:	f000 f884 	bl	80037a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2140      	movs	r1, #64	@ 0x40
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f8db 	bl	800385a <TIM_ITRx_SetConfig>
      break;
 80036a4:	e00c      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4619      	mov	r1, r3
 80036b0:	4610      	mov	r0, r2
 80036b2:	f000 f8d2 	bl	800385a <TIM_ITRx_SetConfig>
      break;
 80036b6:	e003      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
      break;
 80036bc:	e000      	b.n	80036c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80036d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a29      	ldr	r2, [pc, #164]	@ (8003794 <TIM_Base_SetConfig+0xb8>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d00b      	beq.n	800370c <TIM_Base_SetConfig+0x30>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fa:	d007      	beq.n	800370c <TIM_Base_SetConfig+0x30>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a26      	ldr	r2, [pc, #152]	@ (8003798 <TIM_Base_SetConfig+0xbc>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <TIM_Base_SetConfig+0x30>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a25      	ldr	r2, [pc, #148]	@ (800379c <TIM_Base_SetConfig+0xc0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d108      	bne.n	800371e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1c      	ldr	r2, [pc, #112]	@ (8003794 <TIM_Base_SetConfig+0xb8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00b      	beq.n	800373e <TIM_Base_SetConfig+0x62>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372c:	d007      	beq.n	800373e <TIM_Base_SetConfig+0x62>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a19      	ldr	r2, [pc, #100]	@ (8003798 <TIM_Base_SetConfig+0xbc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d003      	beq.n	800373e <TIM_Base_SetConfig+0x62>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a18      	ldr	r2, [pc, #96]	@ (800379c <TIM_Base_SetConfig+0xc0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d108      	bne.n	8003750 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003744:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a07      	ldr	r2, [pc, #28]	@ (8003794 <TIM_Base_SetConfig+0xb8>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d103      	bne.n	8003784 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	615a      	str	r2, [r3, #20]
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800

080037a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f023 0201 	bic.w	r2, r3, #1
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 030a 	bic.w	r3, r3, #10
 80037dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b087      	sub	sp, #28
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	f023 0210 	bic.w	r2, r3, #16
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	031b      	lsls	r3, r3, #12
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003838:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800385a:	b480      	push	{r7}
 800385c:	b085      	sub	sp, #20
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
 8003862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	f043 0307 	orr.w	r3, r3, #7
 800387c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	609a      	str	r2, [r3, #8]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr

0800388e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800388e:	b480      	push	{r7}
 8003890:	b087      	sub	sp, #28
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80038a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	021a      	lsls	r2, r3, #8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	609a      	str	r2, [r3, #8]
}
 80038c2:	bf00      	nop
 80038c4:	371c      	adds	r7, #28
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr

080038cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e046      	b.n	8003972 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800390a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4313      	orrs	r3, r2
 8003914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a16      	ldr	r2, [pc, #88]	@ (800397c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d00e      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003930:	d009      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a12      	ldr	r2, [pc, #72]	@ (8003980 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d004      	beq.n	8003946 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a10      	ldr	r2, [pc, #64]	@ (8003984 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d10c      	bne.n	8003960 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800394c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	4313      	orrs	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr
 800397c:	40012c00 	.word	0x40012c00
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800

08003988 <siprintf>:
 8003988:	b40e      	push	{r1, r2, r3}
 800398a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800398e:	b500      	push	{lr}
 8003990:	b09c      	sub	sp, #112	@ 0x70
 8003992:	ab1d      	add	r3, sp, #116	@ 0x74
 8003994:	9002      	str	r0, [sp, #8]
 8003996:	9006      	str	r0, [sp, #24]
 8003998:	9107      	str	r1, [sp, #28]
 800399a:	9104      	str	r1, [sp, #16]
 800399c:	4808      	ldr	r0, [pc, #32]	@ (80039c0 <siprintf+0x38>)
 800399e:	4909      	ldr	r1, [pc, #36]	@ (80039c4 <siprintf+0x3c>)
 80039a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80039a4:	9105      	str	r1, [sp, #20]
 80039a6:	6800      	ldr	r0, [r0, #0]
 80039a8:	a902      	add	r1, sp, #8
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	f000 f992 	bl	8003cd4 <_svfiprintf_r>
 80039b0:	2200      	movs	r2, #0
 80039b2:	9b02      	ldr	r3, [sp, #8]
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	b01c      	add	sp, #112	@ 0x70
 80039b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80039bc:	b003      	add	sp, #12
 80039be:	4770      	bx	lr
 80039c0:	2000001c 	.word	0x2000001c
 80039c4:	ffff0208 	.word	0xffff0208

080039c8 <memset>:
 80039c8:	4603      	mov	r3, r0
 80039ca:	4402      	add	r2, r0
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d100      	bne.n	80039d2 <memset+0xa>
 80039d0:	4770      	bx	lr
 80039d2:	f803 1b01 	strb.w	r1, [r3], #1
 80039d6:	e7f9      	b.n	80039cc <memset+0x4>

080039d8 <__errno>:
 80039d8:	4b01      	ldr	r3, [pc, #4]	@ (80039e0 <__errno+0x8>)
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	2000001c 	.word	0x2000001c

080039e4 <__libc_init_array>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	2600      	movs	r6, #0
 80039e8:	4d0c      	ldr	r5, [pc, #48]	@ (8003a1c <__libc_init_array+0x38>)
 80039ea:	4c0d      	ldr	r4, [pc, #52]	@ (8003a20 <__libc_init_array+0x3c>)
 80039ec:	1b64      	subs	r4, r4, r5
 80039ee:	10a4      	asrs	r4, r4, #2
 80039f0:	42a6      	cmp	r6, r4
 80039f2:	d109      	bne.n	8003a08 <__libc_init_array+0x24>
 80039f4:	f000 fc78 	bl	80042e8 <_init>
 80039f8:	2600      	movs	r6, #0
 80039fa:	4d0a      	ldr	r5, [pc, #40]	@ (8003a24 <__libc_init_array+0x40>)
 80039fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003a28 <__libc_init_array+0x44>)
 80039fe:	1b64      	subs	r4, r4, r5
 8003a00:	10a4      	asrs	r4, r4, #2
 8003a02:	42a6      	cmp	r6, r4
 8003a04:	d105      	bne.n	8003a12 <__libc_init_array+0x2e>
 8003a06:	bd70      	pop	{r4, r5, r6, pc}
 8003a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a0c:	4798      	blx	r3
 8003a0e:	3601      	adds	r6, #1
 8003a10:	e7ee      	b.n	80039f0 <__libc_init_array+0xc>
 8003a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a16:	4798      	blx	r3
 8003a18:	3601      	adds	r6, #1
 8003a1a:	e7f2      	b.n	8003a02 <__libc_init_array+0x1e>
 8003a1c:	0800641c 	.word	0x0800641c
 8003a20:	0800641c 	.word	0x0800641c
 8003a24:	0800641c 	.word	0x0800641c
 8003a28:	08006420 	.word	0x08006420

08003a2c <__retarget_lock_acquire_recursive>:
 8003a2c:	4770      	bx	lr

08003a2e <__retarget_lock_release_recursive>:
 8003a2e:	4770      	bx	lr

08003a30 <_free_r>:
 8003a30:	b538      	push	{r3, r4, r5, lr}
 8003a32:	4605      	mov	r5, r0
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d040      	beq.n	8003aba <_free_r+0x8a>
 8003a38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a3c:	1f0c      	subs	r4, r1, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bfb8      	it	lt
 8003a42:	18e4      	addlt	r4, r4, r3
 8003a44:	f000 f8de 	bl	8003c04 <__malloc_lock>
 8003a48:	4a1c      	ldr	r2, [pc, #112]	@ (8003abc <_free_r+0x8c>)
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	b933      	cbnz	r3, 8003a5c <_free_r+0x2c>
 8003a4e:	6063      	str	r3, [r4, #4]
 8003a50:	6014      	str	r4, [r2, #0]
 8003a52:	4628      	mov	r0, r5
 8003a54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a58:	f000 b8da 	b.w	8003c10 <__malloc_unlock>
 8003a5c:	42a3      	cmp	r3, r4
 8003a5e:	d908      	bls.n	8003a72 <_free_r+0x42>
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	1821      	adds	r1, r4, r0
 8003a64:	428b      	cmp	r3, r1
 8003a66:	bf01      	itttt	eq
 8003a68:	6819      	ldreq	r1, [r3, #0]
 8003a6a:	685b      	ldreq	r3, [r3, #4]
 8003a6c:	1809      	addeq	r1, r1, r0
 8003a6e:	6021      	streq	r1, [r4, #0]
 8003a70:	e7ed      	b.n	8003a4e <_free_r+0x1e>
 8003a72:	461a      	mov	r2, r3
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	b10b      	cbz	r3, 8003a7c <_free_r+0x4c>
 8003a78:	42a3      	cmp	r3, r4
 8003a7a:	d9fa      	bls.n	8003a72 <_free_r+0x42>
 8003a7c:	6811      	ldr	r1, [r2, #0]
 8003a7e:	1850      	adds	r0, r2, r1
 8003a80:	42a0      	cmp	r0, r4
 8003a82:	d10b      	bne.n	8003a9c <_free_r+0x6c>
 8003a84:	6820      	ldr	r0, [r4, #0]
 8003a86:	4401      	add	r1, r0
 8003a88:	1850      	adds	r0, r2, r1
 8003a8a:	4283      	cmp	r3, r0
 8003a8c:	6011      	str	r1, [r2, #0]
 8003a8e:	d1e0      	bne.n	8003a52 <_free_r+0x22>
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4408      	add	r0, r1
 8003a96:	6010      	str	r0, [r2, #0]
 8003a98:	6053      	str	r3, [r2, #4]
 8003a9a:	e7da      	b.n	8003a52 <_free_r+0x22>
 8003a9c:	d902      	bls.n	8003aa4 <_free_r+0x74>
 8003a9e:	230c      	movs	r3, #12
 8003aa0:	602b      	str	r3, [r5, #0]
 8003aa2:	e7d6      	b.n	8003a52 <_free_r+0x22>
 8003aa4:	6820      	ldr	r0, [r4, #0]
 8003aa6:	1821      	adds	r1, r4, r0
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	bf01      	itttt	eq
 8003aac:	6819      	ldreq	r1, [r3, #0]
 8003aae:	685b      	ldreq	r3, [r3, #4]
 8003ab0:	1809      	addeq	r1, r1, r0
 8003ab2:	6021      	streq	r1, [r4, #0]
 8003ab4:	6063      	str	r3, [r4, #4]
 8003ab6:	6054      	str	r4, [r2, #4]
 8003ab8:	e7cb      	b.n	8003a52 <_free_r+0x22>
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	20000748 	.word	0x20000748

08003ac0 <sbrk_aligned>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	4e0f      	ldr	r6, [pc, #60]	@ (8003b00 <sbrk_aligned+0x40>)
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	6831      	ldr	r1, [r6, #0]
 8003ac8:	4605      	mov	r5, r0
 8003aca:	b911      	cbnz	r1, 8003ad2 <sbrk_aligned+0x12>
 8003acc:	f000 fbaa 	bl	8004224 <_sbrk_r>
 8003ad0:	6030      	str	r0, [r6, #0]
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f000 fba5 	bl	8004224 <_sbrk_r>
 8003ada:	1c43      	adds	r3, r0, #1
 8003adc:	d103      	bne.n	8003ae6 <sbrk_aligned+0x26>
 8003ade:	f04f 34ff 	mov.w	r4, #4294967295
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	bd70      	pop	{r4, r5, r6, pc}
 8003ae6:	1cc4      	adds	r4, r0, #3
 8003ae8:	f024 0403 	bic.w	r4, r4, #3
 8003aec:	42a0      	cmp	r0, r4
 8003aee:	d0f8      	beq.n	8003ae2 <sbrk_aligned+0x22>
 8003af0:	1a21      	subs	r1, r4, r0
 8003af2:	4628      	mov	r0, r5
 8003af4:	f000 fb96 	bl	8004224 <_sbrk_r>
 8003af8:	3001      	adds	r0, #1
 8003afa:	d1f2      	bne.n	8003ae2 <sbrk_aligned+0x22>
 8003afc:	e7ef      	b.n	8003ade <sbrk_aligned+0x1e>
 8003afe:	bf00      	nop
 8003b00:	20000744 	.word	0x20000744

08003b04 <_malloc_r>:
 8003b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b08:	1ccd      	adds	r5, r1, #3
 8003b0a:	f025 0503 	bic.w	r5, r5, #3
 8003b0e:	3508      	adds	r5, #8
 8003b10:	2d0c      	cmp	r5, #12
 8003b12:	bf38      	it	cc
 8003b14:	250c      	movcc	r5, #12
 8003b16:	2d00      	cmp	r5, #0
 8003b18:	4606      	mov	r6, r0
 8003b1a:	db01      	blt.n	8003b20 <_malloc_r+0x1c>
 8003b1c:	42a9      	cmp	r1, r5
 8003b1e:	d904      	bls.n	8003b2a <_malloc_r+0x26>
 8003b20:	230c      	movs	r3, #12
 8003b22:	6033      	str	r3, [r6, #0]
 8003b24:	2000      	movs	r0, #0
 8003b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c00 <_malloc_r+0xfc>
 8003b2e:	f000 f869 	bl	8003c04 <__malloc_lock>
 8003b32:	f8d8 3000 	ldr.w	r3, [r8]
 8003b36:	461c      	mov	r4, r3
 8003b38:	bb44      	cbnz	r4, 8003b8c <_malloc_r+0x88>
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	4630      	mov	r0, r6
 8003b3e:	f7ff ffbf 	bl	8003ac0 <sbrk_aligned>
 8003b42:	1c43      	adds	r3, r0, #1
 8003b44:	4604      	mov	r4, r0
 8003b46:	d158      	bne.n	8003bfa <_malloc_r+0xf6>
 8003b48:	f8d8 4000 	ldr.w	r4, [r8]
 8003b4c:	4627      	mov	r7, r4
 8003b4e:	2f00      	cmp	r7, #0
 8003b50:	d143      	bne.n	8003bda <_malloc_r+0xd6>
 8003b52:	2c00      	cmp	r4, #0
 8003b54:	d04b      	beq.n	8003bee <_malloc_r+0xea>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	4639      	mov	r1, r7
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	eb04 0903 	add.w	r9, r4, r3
 8003b60:	f000 fb60 	bl	8004224 <_sbrk_r>
 8003b64:	4581      	cmp	r9, r0
 8003b66:	d142      	bne.n	8003bee <_malloc_r+0xea>
 8003b68:	6821      	ldr	r1, [r4, #0]
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	1a6d      	subs	r5, r5, r1
 8003b6e:	4629      	mov	r1, r5
 8003b70:	f7ff ffa6 	bl	8003ac0 <sbrk_aligned>
 8003b74:	3001      	adds	r0, #1
 8003b76:	d03a      	beq.n	8003bee <_malloc_r+0xea>
 8003b78:	6823      	ldr	r3, [r4, #0]
 8003b7a:	442b      	add	r3, r5
 8003b7c:	6023      	str	r3, [r4, #0]
 8003b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	bb62      	cbnz	r2, 8003be0 <_malloc_r+0xdc>
 8003b86:	f8c8 7000 	str.w	r7, [r8]
 8003b8a:	e00f      	b.n	8003bac <_malloc_r+0xa8>
 8003b8c:	6822      	ldr	r2, [r4, #0]
 8003b8e:	1b52      	subs	r2, r2, r5
 8003b90:	d420      	bmi.n	8003bd4 <_malloc_r+0xd0>
 8003b92:	2a0b      	cmp	r2, #11
 8003b94:	d917      	bls.n	8003bc6 <_malloc_r+0xc2>
 8003b96:	1961      	adds	r1, r4, r5
 8003b98:	42a3      	cmp	r3, r4
 8003b9a:	6025      	str	r5, [r4, #0]
 8003b9c:	bf18      	it	ne
 8003b9e:	6059      	strne	r1, [r3, #4]
 8003ba0:	6863      	ldr	r3, [r4, #4]
 8003ba2:	bf08      	it	eq
 8003ba4:	f8c8 1000 	streq.w	r1, [r8]
 8003ba8:	5162      	str	r2, [r4, r5]
 8003baa:	604b      	str	r3, [r1, #4]
 8003bac:	4630      	mov	r0, r6
 8003bae:	f000 f82f 	bl	8003c10 <__malloc_unlock>
 8003bb2:	f104 000b 	add.w	r0, r4, #11
 8003bb6:	1d23      	adds	r3, r4, #4
 8003bb8:	f020 0007 	bic.w	r0, r0, #7
 8003bbc:	1ac2      	subs	r2, r0, r3
 8003bbe:	bf1c      	itt	ne
 8003bc0:	1a1b      	subne	r3, r3, r0
 8003bc2:	50a3      	strne	r3, [r4, r2]
 8003bc4:	e7af      	b.n	8003b26 <_malloc_r+0x22>
 8003bc6:	6862      	ldr	r2, [r4, #4]
 8003bc8:	42a3      	cmp	r3, r4
 8003bca:	bf0c      	ite	eq
 8003bcc:	f8c8 2000 	streq.w	r2, [r8]
 8003bd0:	605a      	strne	r2, [r3, #4]
 8003bd2:	e7eb      	b.n	8003bac <_malloc_r+0xa8>
 8003bd4:	4623      	mov	r3, r4
 8003bd6:	6864      	ldr	r4, [r4, #4]
 8003bd8:	e7ae      	b.n	8003b38 <_malloc_r+0x34>
 8003bda:	463c      	mov	r4, r7
 8003bdc:	687f      	ldr	r7, [r7, #4]
 8003bde:	e7b6      	b.n	8003b4e <_malloc_r+0x4a>
 8003be0:	461a      	mov	r2, r3
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	d1fb      	bne.n	8003be0 <_malloc_r+0xdc>
 8003be8:	2300      	movs	r3, #0
 8003bea:	6053      	str	r3, [r2, #4]
 8003bec:	e7de      	b.n	8003bac <_malloc_r+0xa8>
 8003bee:	230c      	movs	r3, #12
 8003bf0:	4630      	mov	r0, r6
 8003bf2:	6033      	str	r3, [r6, #0]
 8003bf4:	f000 f80c 	bl	8003c10 <__malloc_unlock>
 8003bf8:	e794      	b.n	8003b24 <_malloc_r+0x20>
 8003bfa:	6005      	str	r5, [r0, #0]
 8003bfc:	e7d6      	b.n	8003bac <_malloc_r+0xa8>
 8003bfe:	bf00      	nop
 8003c00:	20000748 	.word	0x20000748

08003c04 <__malloc_lock>:
 8003c04:	4801      	ldr	r0, [pc, #4]	@ (8003c0c <__malloc_lock+0x8>)
 8003c06:	f7ff bf11 	b.w	8003a2c <__retarget_lock_acquire_recursive>
 8003c0a:	bf00      	nop
 8003c0c:	20000740 	.word	0x20000740

08003c10 <__malloc_unlock>:
 8003c10:	4801      	ldr	r0, [pc, #4]	@ (8003c18 <__malloc_unlock+0x8>)
 8003c12:	f7ff bf0c 	b.w	8003a2e <__retarget_lock_release_recursive>
 8003c16:	bf00      	nop
 8003c18:	20000740 	.word	0x20000740

08003c1c <__ssputs_r>:
 8003c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c20:	461f      	mov	r7, r3
 8003c22:	688e      	ldr	r6, [r1, #8]
 8003c24:	4682      	mov	sl, r0
 8003c26:	42be      	cmp	r6, r7
 8003c28:	460c      	mov	r4, r1
 8003c2a:	4690      	mov	r8, r2
 8003c2c:	680b      	ldr	r3, [r1, #0]
 8003c2e:	d82d      	bhi.n	8003c8c <__ssputs_r+0x70>
 8003c30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c34:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c38:	d026      	beq.n	8003c88 <__ssputs_r+0x6c>
 8003c3a:	6965      	ldr	r5, [r4, #20]
 8003c3c:	6909      	ldr	r1, [r1, #16]
 8003c3e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c42:	eba3 0901 	sub.w	r9, r3, r1
 8003c46:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c4a:	1c7b      	adds	r3, r7, #1
 8003c4c:	444b      	add	r3, r9
 8003c4e:	106d      	asrs	r5, r5, #1
 8003c50:	429d      	cmp	r5, r3
 8003c52:	bf38      	it	cc
 8003c54:	461d      	movcc	r5, r3
 8003c56:	0553      	lsls	r3, r2, #21
 8003c58:	d527      	bpl.n	8003caa <__ssputs_r+0x8e>
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	f7ff ff52 	bl	8003b04 <_malloc_r>
 8003c60:	4606      	mov	r6, r0
 8003c62:	b360      	cbz	r0, 8003cbe <__ssputs_r+0xa2>
 8003c64:	464a      	mov	r2, r9
 8003c66:	6921      	ldr	r1, [r4, #16]
 8003c68:	f000 fafa 	bl	8004260 <memcpy>
 8003c6c:	89a3      	ldrh	r3, [r4, #12]
 8003c6e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c76:	81a3      	strh	r3, [r4, #12]
 8003c78:	6126      	str	r6, [r4, #16]
 8003c7a:	444e      	add	r6, r9
 8003c7c:	6026      	str	r6, [r4, #0]
 8003c7e:	463e      	mov	r6, r7
 8003c80:	6165      	str	r5, [r4, #20]
 8003c82:	eba5 0509 	sub.w	r5, r5, r9
 8003c86:	60a5      	str	r5, [r4, #8]
 8003c88:	42be      	cmp	r6, r7
 8003c8a:	d900      	bls.n	8003c8e <__ssputs_r+0x72>
 8003c8c:	463e      	mov	r6, r7
 8003c8e:	4632      	mov	r2, r6
 8003c90:	4641      	mov	r1, r8
 8003c92:	6820      	ldr	r0, [r4, #0]
 8003c94:	f000 faac 	bl	80041f0 <memmove>
 8003c98:	2000      	movs	r0, #0
 8003c9a:	68a3      	ldr	r3, [r4, #8]
 8003c9c:	1b9b      	subs	r3, r3, r6
 8003c9e:	60a3      	str	r3, [r4, #8]
 8003ca0:	6823      	ldr	r3, [r4, #0]
 8003ca2:	4433      	add	r3, r6
 8003ca4:	6023      	str	r3, [r4, #0]
 8003ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003caa:	462a      	mov	r2, r5
 8003cac:	f000 fae6 	bl	800427c <_realloc_r>
 8003cb0:	4606      	mov	r6, r0
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d1e0      	bne.n	8003c78 <__ssputs_r+0x5c>
 8003cb6:	4650      	mov	r0, sl
 8003cb8:	6921      	ldr	r1, [r4, #16]
 8003cba:	f7ff feb9 	bl	8003a30 <_free_r>
 8003cbe:	230c      	movs	r3, #12
 8003cc0:	f8ca 3000 	str.w	r3, [sl]
 8003cc4:	89a3      	ldrh	r3, [r4, #12]
 8003cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cce:	81a3      	strh	r3, [r4, #12]
 8003cd0:	e7e9      	b.n	8003ca6 <__ssputs_r+0x8a>
	...

08003cd4 <_svfiprintf_r>:
 8003cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd8:	4698      	mov	r8, r3
 8003cda:	898b      	ldrh	r3, [r1, #12]
 8003cdc:	4607      	mov	r7, r0
 8003cde:	061b      	lsls	r3, r3, #24
 8003ce0:	460d      	mov	r5, r1
 8003ce2:	4614      	mov	r4, r2
 8003ce4:	b09d      	sub	sp, #116	@ 0x74
 8003ce6:	d510      	bpl.n	8003d0a <_svfiprintf_r+0x36>
 8003ce8:	690b      	ldr	r3, [r1, #16]
 8003cea:	b973      	cbnz	r3, 8003d0a <_svfiprintf_r+0x36>
 8003cec:	2140      	movs	r1, #64	@ 0x40
 8003cee:	f7ff ff09 	bl	8003b04 <_malloc_r>
 8003cf2:	6028      	str	r0, [r5, #0]
 8003cf4:	6128      	str	r0, [r5, #16]
 8003cf6:	b930      	cbnz	r0, 8003d06 <_svfiprintf_r+0x32>
 8003cf8:	230c      	movs	r3, #12
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8003d00:	b01d      	add	sp, #116	@ 0x74
 8003d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d06:	2340      	movs	r3, #64	@ 0x40
 8003d08:	616b      	str	r3, [r5, #20]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d0e:	2320      	movs	r3, #32
 8003d10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d14:	2330      	movs	r3, #48	@ 0x30
 8003d16:	f04f 0901 	mov.w	r9, #1
 8003d1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d1e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003eb8 <_svfiprintf_r+0x1e4>
 8003d22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d26:	4623      	mov	r3, r4
 8003d28:	469a      	mov	sl, r3
 8003d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d2e:	b10a      	cbz	r2, 8003d34 <_svfiprintf_r+0x60>
 8003d30:	2a25      	cmp	r2, #37	@ 0x25
 8003d32:	d1f9      	bne.n	8003d28 <_svfiprintf_r+0x54>
 8003d34:	ebba 0b04 	subs.w	fp, sl, r4
 8003d38:	d00b      	beq.n	8003d52 <_svfiprintf_r+0x7e>
 8003d3a:	465b      	mov	r3, fp
 8003d3c:	4622      	mov	r2, r4
 8003d3e:	4629      	mov	r1, r5
 8003d40:	4638      	mov	r0, r7
 8003d42:	f7ff ff6b 	bl	8003c1c <__ssputs_r>
 8003d46:	3001      	adds	r0, #1
 8003d48:	f000 80a7 	beq.w	8003e9a <_svfiprintf_r+0x1c6>
 8003d4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d4e:	445a      	add	r2, fp
 8003d50:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d52:	f89a 3000 	ldrb.w	r3, [sl]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 809f 	beq.w	8003e9a <_svfiprintf_r+0x1c6>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003d62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d66:	f10a 0a01 	add.w	sl, sl, #1
 8003d6a:	9304      	str	r3, [sp, #16]
 8003d6c:	9307      	str	r3, [sp, #28]
 8003d6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d72:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d74:	4654      	mov	r4, sl
 8003d76:	2205      	movs	r2, #5
 8003d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d7c:	484e      	ldr	r0, [pc, #312]	@ (8003eb8 <_svfiprintf_r+0x1e4>)
 8003d7e:	f000 fa61 	bl	8004244 <memchr>
 8003d82:	9a04      	ldr	r2, [sp, #16]
 8003d84:	b9d8      	cbnz	r0, 8003dbe <_svfiprintf_r+0xea>
 8003d86:	06d0      	lsls	r0, r2, #27
 8003d88:	bf44      	itt	mi
 8003d8a:	2320      	movmi	r3, #32
 8003d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d90:	0711      	lsls	r1, r2, #28
 8003d92:	bf44      	itt	mi
 8003d94:	232b      	movmi	r3, #43	@ 0x2b
 8003d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003da0:	d015      	beq.n	8003dce <_svfiprintf_r+0xfa>
 8003da2:	4654      	mov	r4, sl
 8003da4:	2000      	movs	r0, #0
 8003da6:	f04f 0c0a 	mov.w	ip, #10
 8003daa:	9a07      	ldr	r2, [sp, #28]
 8003dac:	4621      	mov	r1, r4
 8003dae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003db2:	3b30      	subs	r3, #48	@ 0x30
 8003db4:	2b09      	cmp	r3, #9
 8003db6:	d94b      	bls.n	8003e50 <_svfiprintf_r+0x17c>
 8003db8:	b1b0      	cbz	r0, 8003de8 <_svfiprintf_r+0x114>
 8003dba:	9207      	str	r2, [sp, #28]
 8003dbc:	e014      	b.n	8003de8 <_svfiprintf_r+0x114>
 8003dbe:	eba0 0308 	sub.w	r3, r0, r8
 8003dc2:	fa09 f303 	lsl.w	r3, r9, r3
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	46a2      	mov	sl, r4
 8003dca:	9304      	str	r3, [sp, #16]
 8003dcc:	e7d2      	b.n	8003d74 <_svfiprintf_r+0xa0>
 8003dce:	9b03      	ldr	r3, [sp, #12]
 8003dd0:	1d19      	adds	r1, r3, #4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	9103      	str	r1, [sp, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bfbb      	ittet	lt
 8003dda:	425b      	neglt	r3, r3
 8003ddc:	f042 0202 	orrlt.w	r2, r2, #2
 8003de0:	9307      	strge	r3, [sp, #28]
 8003de2:	9307      	strlt	r3, [sp, #28]
 8003de4:	bfb8      	it	lt
 8003de6:	9204      	strlt	r2, [sp, #16]
 8003de8:	7823      	ldrb	r3, [r4, #0]
 8003dea:	2b2e      	cmp	r3, #46	@ 0x2e
 8003dec:	d10a      	bne.n	8003e04 <_svfiprintf_r+0x130>
 8003dee:	7863      	ldrb	r3, [r4, #1]
 8003df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8003df2:	d132      	bne.n	8003e5a <_svfiprintf_r+0x186>
 8003df4:	9b03      	ldr	r3, [sp, #12]
 8003df6:	3402      	adds	r4, #2
 8003df8:	1d1a      	adds	r2, r3, #4
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	9203      	str	r2, [sp, #12]
 8003dfe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e02:	9305      	str	r3, [sp, #20]
 8003e04:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003ebc <_svfiprintf_r+0x1e8>
 8003e08:	2203      	movs	r2, #3
 8003e0a:	4650      	mov	r0, sl
 8003e0c:	7821      	ldrb	r1, [r4, #0]
 8003e0e:	f000 fa19 	bl	8004244 <memchr>
 8003e12:	b138      	cbz	r0, 8003e24 <_svfiprintf_r+0x150>
 8003e14:	2240      	movs	r2, #64	@ 0x40
 8003e16:	9b04      	ldr	r3, [sp, #16]
 8003e18:	eba0 000a 	sub.w	r0, r0, sl
 8003e1c:	4082      	lsls	r2, r0
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	3401      	adds	r4, #1
 8003e22:	9304      	str	r3, [sp, #16]
 8003e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e28:	2206      	movs	r2, #6
 8003e2a:	4825      	ldr	r0, [pc, #148]	@ (8003ec0 <_svfiprintf_r+0x1ec>)
 8003e2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e30:	f000 fa08 	bl	8004244 <memchr>
 8003e34:	2800      	cmp	r0, #0
 8003e36:	d036      	beq.n	8003ea6 <_svfiprintf_r+0x1d2>
 8003e38:	4b22      	ldr	r3, [pc, #136]	@ (8003ec4 <_svfiprintf_r+0x1f0>)
 8003e3a:	bb1b      	cbnz	r3, 8003e84 <_svfiprintf_r+0x1b0>
 8003e3c:	9b03      	ldr	r3, [sp, #12]
 8003e3e:	3307      	adds	r3, #7
 8003e40:	f023 0307 	bic.w	r3, r3, #7
 8003e44:	3308      	adds	r3, #8
 8003e46:	9303      	str	r3, [sp, #12]
 8003e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e4a:	4433      	add	r3, r6
 8003e4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e4e:	e76a      	b.n	8003d26 <_svfiprintf_r+0x52>
 8003e50:	460c      	mov	r4, r1
 8003e52:	2001      	movs	r0, #1
 8003e54:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e58:	e7a8      	b.n	8003dac <_svfiprintf_r+0xd8>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f04f 0c0a 	mov.w	ip, #10
 8003e60:	4619      	mov	r1, r3
 8003e62:	3401      	adds	r4, #1
 8003e64:	9305      	str	r3, [sp, #20]
 8003e66:	4620      	mov	r0, r4
 8003e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e6c:	3a30      	subs	r2, #48	@ 0x30
 8003e6e:	2a09      	cmp	r2, #9
 8003e70:	d903      	bls.n	8003e7a <_svfiprintf_r+0x1a6>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0c6      	beq.n	8003e04 <_svfiprintf_r+0x130>
 8003e76:	9105      	str	r1, [sp, #20]
 8003e78:	e7c4      	b.n	8003e04 <_svfiprintf_r+0x130>
 8003e7a:	4604      	mov	r4, r0
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e82:	e7f0      	b.n	8003e66 <_svfiprintf_r+0x192>
 8003e84:	ab03      	add	r3, sp, #12
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	462a      	mov	r2, r5
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <_svfiprintf_r+0x1f4>)
 8003e8e:	a904      	add	r1, sp, #16
 8003e90:	f3af 8000 	nop.w
 8003e94:	1c42      	adds	r2, r0, #1
 8003e96:	4606      	mov	r6, r0
 8003e98:	d1d6      	bne.n	8003e48 <_svfiprintf_r+0x174>
 8003e9a:	89ab      	ldrh	r3, [r5, #12]
 8003e9c:	065b      	lsls	r3, r3, #25
 8003e9e:	f53f af2d 	bmi.w	8003cfc <_svfiprintf_r+0x28>
 8003ea2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ea4:	e72c      	b.n	8003d00 <_svfiprintf_r+0x2c>
 8003ea6:	ab03      	add	r3, sp, #12
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	462a      	mov	r2, r5
 8003eac:	4638      	mov	r0, r7
 8003eae:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <_svfiprintf_r+0x1f4>)
 8003eb0:	a904      	add	r1, sp, #16
 8003eb2:	f000 f87d 	bl	8003fb0 <_printf_i>
 8003eb6:	e7ed      	b.n	8003e94 <_svfiprintf_r+0x1c0>
 8003eb8:	080063e6 	.word	0x080063e6
 8003ebc:	080063ec 	.word	0x080063ec
 8003ec0:	080063f0 	.word	0x080063f0
 8003ec4:	00000000 	.word	0x00000000
 8003ec8:	08003c1d 	.word	0x08003c1d

08003ecc <_printf_common>:
 8003ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed0:	4616      	mov	r6, r2
 8003ed2:	4698      	mov	r8, r3
 8003ed4:	688a      	ldr	r2, [r1, #8]
 8003ed6:	690b      	ldr	r3, [r1, #16]
 8003ed8:	4607      	mov	r7, r0
 8003eda:	4293      	cmp	r3, r2
 8003edc:	bfb8      	it	lt
 8003ede:	4613      	movlt	r3, r2
 8003ee0:	6033      	str	r3, [r6, #0]
 8003ee2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003eec:	b10a      	cbz	r2, 8003ef2 <_printf_common+0x26>
 8003eee:	3301      	adds	r3, #1
 8003ef0:	6033      	str	r3, [r6, #0]
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	0699      	lsls	r1, r3, #26
 8003ef6:	bf42      	ittt	mi
 8003ef8:	6833      	ldrmi	r3, [r6, #0]
 8003efa:	3302      	addmi	r3, #2
 8003efc:	6033      	strmi	r3, [r6, #0]
 8003efe:	6825      	ldr	r5, [r4, #0]
 8003f00:	f015 0506 	ands.w	r5, r5, #6
 8003f04:	d106      	bne.n	8003f14 <_printf_common+0x48>
 8003f06:	f104 0a19 	add.w	sl, r4, #25
 8003f0a:	68e3      	ldr	r3, [r4, #12]
 8003f0c:	6832      	ldr	r2, [r6, #0]
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	42ab      	cmp	r3, r5
 8003f12:	dc2b      	bgt.n	8003f6c <_printf_common+0xa0>
 8003f14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f18:	6822      	ldr	r2, [r4, #0]
 8003f1a:	3b00      	subs	r3, #0
 8003f1c:	bf18      	it	ne
 8003f1e:	2301      	movne	r3, #1
 8003f20:	0692      	lsls	r2, r2, #26
 8003f22:	d430      	bmi.n	8003f86 <_printf_common+0xba>
 8003f24:	4641      	mov	r1, r8
 8003f26:	4638      	mov	r0, r7
 8003f28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f2c:	47c8      	blx	r9
 8003f2e:	3001      	adds	r0, #1
 8003f30:	d023      	beq.n	8003f7a <_printf_common+0xae>
 8003f32:	6823      	ldr	r3, [r4, #0]
 8003f34:	6922      	ldr	r2, [r4, #16]
 8003f36:	f003 0306 	and.w	r3, r3, #6
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	bf14      	ite	ne
 8003f3e:	2500      	movne	r5, #0
 8003f40:	6833      	ldreq	r3, [r6, #0]
 8003f42:	f04f 0600 	mov.w	r6, #0
 8003f46:	bf08      	it	eq
 8003f48:	68e5      	ldreq	r5, [r4, #12]
 8003f4a:	f104 041a 	add.w	r4, r4, #26
 8003f4e:	bf08      	it	eq
 8003f50:	1aed      	subeq	r5, r5, r3
 8003f52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f56:	bf08      	it	eq
 8003f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	bfc4      	itt	gt
 8003f60:	1a9b      	subgt	r3, r3, r2
 8003f62:	18ed      	addgt	r5, r5, r3
 8003f64:	42b5      	cmp	r5, r6
 8003f66:	d11a      	bne.n	8003f9e <_printf_common+0xd2>
 8003f68:	2000      	movs	r0, #0
 8003f6a:	e008      	b.n	8003f7e <_printf_common+0xb2>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	4652      	mov	r2, sl
 8003f70:	4641      	mov	r1, r8
 8003f72:	4638      	mov	r0, r7
 8003f74:	47c8      	blx	r9
 8003f76:	3001      	adds	r0, #1
 8003f78:	d103      	bne.n	8003f82 <_printf_common+0xb6>
 8003f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f82:	3501      	adds	r5, #1
 8003f84:	e7c1      	b.n	8003f0a <_printf_common+0x3e>
 8003f86:	2030      	movs	r0, #48	@ 0x30
 8003f88:	18e1      	adds	r1, r4, r3
 8003f8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f94:	4422      	add	r2, r4
 8003f96:	3302      	adds	r3, #2
 8003f98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f9c:	e7c2      	b.n	8003f24 <_printf_common+0x58>
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	47c8      	blx	r9
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d0e6      	beq.n	8003f7a <_printf_common+0xae>
 8003fac:	3601      	adds	r6, #1
 8003fae:	e7d9      	b.n	8003f64 <_printf_common+0x98>

08003fb0 <_printf_i>:
 8003fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb4:	7e0f      	ldrb	r7, [r1, #24]
 8003fb6:	4691      	mov	r9, r2
 8003fb8:	2f78      	cmp	r7, #120	@ 0x78
 8003fba:	4680      	mov	r8, r0
 8003fbc:	460c      	mov	r4, r1
 8003fbe:	469a      	mov	sl, r3
 8003fc0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fc6:	d807      	bhi.n	8003fd8 <_printf_i+0x28>
 8003fc8:	2f62      	cmp	r7, #98	@ 0x62
 8003fca:	d80a      	bhi.n	8003fe2 <_printf_i+0x32>
 8003fcc:	2f00      	cmp	r7, #0
 8003fce:	f000 80d3 	beq.w	8004178 <_printf_i+0x1c8>
 8003fd2:	2f58      	cmp	r7, #88	@ 0x58
 8003fd4:	f000 80ba 	beq.w	800414c <_printf_i+0x19c>
 8003fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fdc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fe0:	e03a      	b.n	8004058 <_printf_i+0xa8>
 8003fe2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fe6:	2b15      	cmp	r3, #21
 8003fe8:	d8f6      	bhi.n	8003fd8 <_printf_i+0x28>
 8003fea:	a101      	add	r1, pc, #4	@ (adr r1, 8003ff0 <_printf_i+0x40>)
 8003fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ff0:	08004049 	.word	0x08004049
 8003ff4:	0800405d 	.word	0x0800405d
 8003ff8:	08003fd9 	.word	0x08003fd9
 8003ffc:	08003fd9 	.word	0x08003fd9
 8004000:	08003fd9 	.word	0x08003fd9
 8004004:	08003fd9 	.word	0x08003fd9
 8004008:	0800405d 	.word	0x0800405d
 800400c:	08003fd9 	.word	0x08003fd9
 8004010:	08003fd9 	.word	0x08003fd9
 8004014:	08003fd9 	.word	0x08003fd9
 8004018:	08003fd9 	.word	0x08003fd9
 800401c:	0800415f 	.word	0x0800415f
 8004020:	08004087 	.word	0x08004087
 8004024:	08004119 	.word	0x08004119
 8004028:	08003fd9 	.word	0x08003fd9
 800402c:	08003fd9 	.word	0x08003fd9
 8004030:	08004181 	.word	0x08004181
 8004034:	08003fd9 	.word	0x08003fd9
 8004038:	08004087 	.word	0x08004087
 800403c:	08003fd9 	.word	0x08003fd9
 8004040:	08003fd9 	.word	0x08003fd9
 8004044:	08004121 	.word	0x08004121
 8004048:	6833      	ldr	r3, [r6, #0]
 800404a:	1d1a      	adds	r2, r3, #4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6032      	str	r2, [r6, #0]
 8004050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004054:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004058:	2301      	movs	r3, #1
 800405a:	e09e      	b.n	800419a <_printf_i+0x1ea>
 800405c:	6833      	ldr	r3, [r6, #0]
 800405e:	6820      	ldr	r0, [r4, #0]
 8004060:	1d19      	adds	r1, r3, #4
 8004062:	6031      	str	r1, [r6, #0]
 8004064:	0606      	lsls	r6, r0, #24
 8004066:	d501      	bpl.n	800406c <_printf_i+0xbc>
 8004068:	681d      	ldr	r5, [r3, #0]
 800406a:	e003      	b.n	8004074 <_printf_i+0xc4>
 800406c:	0645      	lsls	r5, r0, #25
 800406e:	d5fb      	bpl.n	8004068 <_printf_i+0xb8>
 8004070:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004074:	2d00      	cmp	r5, #0
 8004076:	da03      	bge.n	8004080 <_printf_i+0xd0>
 8004078:	232d      	movs	r3, #45	@ 0x2d
 800407a:	426d      	negs	r5, r5
 800407c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004080:	230a      	movs	r3, #10
 8004082:	4859      	ldr	r0, [pc, #356]	@ (80041e8 <_printf_i+0x238>)
 8004084:	e011      	b.n	80040aa <_printf_i+0xfa>
 8004086:	6821      	ldr	r1, [r4, #0]
 8004088:	6833      	ldr	r3, [r6, #0]
 800408a:	0608      	lsls	r0, r1, #24
 800408c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004090:	d402      	bmi.n	8004098 <_printf_i+0xe8>
 8004092:	0649      	lsls	r1, r1, #25
 8004094:	bf48      	it	mi
 8004096:	b2ad      	uxthmi	r5, r5
 8004098:	2f6f      	cmp	r7, #111	@ 0x6f
 800409a:	6033      	str	r3, [r6, #0]
 800409c:	bf14      	ite	ne
 800409e:	230a      	movne	r3, #10
 80040a0:	2308      	moveq	r3, #8
 80040a2:	4851      	ldr	r0, [pc, #324]	@ (80041e8 <_printf_i+0x238>)
 80040a4:	2100      	movs	r1, #0
 80040a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040aa:	6866      	ldr	r6, [r4, #4]
 80040ac:	2e00      	cmp	r6, #0
 80040ae:	bfa8      	it	ge
 80040b0:	6821      	ldrge	r1, [r4, #0]
 80040b2:	60a6      	str	r6, [r4, #8]
 80040b4:	bfa4      	itt	ge
 80040b6:	f021 0104 	bicge.w	r1, r1, #4
 80040ba:	6021      	strge	r1, [r4, #0]
 80040bc:	b90d      	cbnz	r5, 80040c2 <_printf_i+0x112>
 80040be:	2e00      	cmp	r6, #0
 80040c0:	d04b      	beq.n	800415a <_printf_i+0x1aa>
 80040c2:	4616      	mov	r6, r2
 80040c4:	fbb5 f1f3 	udiv	r1, r5, r3
 80040c8:	fb03 5711 	mls	r7, r3, r1, r5
 80040cc:	5dc7      	ldrb	r7, [r0, r7]
 80040ce:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040d2:	462f      	mov	r7, r5
 80040d4:	42bb      	cmp	r3, r7
 80040d6:	460d      	mov	r5, r1
 80040d8:	d9f4      	bls.n	80040c4 <_printf_i+0x114>
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d10b      	bne.n	80040f6 <_printf_i+0x146>
 80040de:	6823      	ldr	r3, [r4, #0]
 80040e0:	07df      	lsls	r7, r3, #31
 80040e2:	d508      	bpl.n	80040f6 <_printf_i+0x146>
 80040e4:	6923      	ldr	r3, [r4, #16]
 80040e6:	6861      	ldr	r1, [r4, #4]
 80040e8:	4299      	cmp	r1, r3
 80040ea:	bfde      	ittt	le
 80040ec:	2330      	movle	r3, #48	@ 0x30
 80040ee:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040f2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040f6:	1b92      	subs	r2, r2, r6
 80040f8:	6122      	str	r2, [r4, #16]
 80040fa:	464b      	mov	r3, r9
 80040fc:	4621      	mov	r1, r4
 80040fe:	4640      	mov	r0, r8
 8004100:	f8cd a000 	str.w	sl, [sp]
 8004104:	aa03      	add	r2, sp, #12
 8004106:	f7ff fee1 	bl	8003ecc <_printf_common>
 800410a:	3001      	adds	r0, #1
 800410c:	d14a      	bne.n	80041a4 <_printf_i+0x1f4>
 800410e:	f04f 30ff 	mov.w	r0, #4294967295
 8004112:	b004      	add	sp, #16
 8004114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004118:	6823      	ldr	r3, [r4, #0]
 800411a:	f043 0320 	orr.w	r3, r3, #32
 800411e:	6023      	str	r3, [r4, #0]
 8004120:	2778      	movs	r7, #120	@ 0x78
 8004122:	4832      	ldr	r0, [pc, #200]	@ (80041ec <_printf_i+0x23c>)
 8004124:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	6831      	ldr	r1, [r6, #0]
 800412c:	061f      	lsls	r7, r3, #24
 800412e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004132:	d402      	bmi.n	800413a <_printf_i+0x18a>
 8004134:	065f      	lsls	r7, r3, #25
 8004136:	bf48      	it	mi
 8004138:	b2ad      	uxthmi	r5, r5
 800413a:	6031      	str	r1, [r6, #0]
 800413c:	07d9      	lsls	r1, r3, #31
 800413e:	bf44      	itt	mi
 8004140:	f043 0320 	orrmi.w	r3, r3, #32
 8004144:	6023      	strmi	r3, [r4, #0]
 8004146:	b11d      	cbz	r5, 8004150 <_printf_i+0x1a0>
 8004148:	2310      	movs	r3, #16
 800414a:	e7ab      	b.n	80040a4 <_printf_i+0xf4>
 800414c:	4826      	ldr	r0, [pc, #152]	@ (80041e8 <_printf_i+0x238>)
 800414e:	e7e9      	b.n	8004124 <_printf_i+0x174>
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	f023 0320 	bic.w	r3, r3, #32
 8004156:	6023      	str	r3, [r4, #0]
 8004158:	e7f6      	b.n	8004148 <_printf_i+0x198>
 800415a:	4616      	mov	r6, r2
 800415c:	e7bd      	b.n	80040da <_printf_i+0x12a>
 800415e:	6833      	ldr	r3, [r6, #0]
 8004160:	6825      	ldr	r5, [r4, #0]
 8004162:	1d18      	adds	r0, r3, #4
 8004164:	6961      	ldr	r1, [r4, #20]
 8004166:	6030      	str	r0, [r6, #0]
 8004168:	062e      	lsls	r6, r5, #24
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	d501      	bpl.n	8004172 <_printf_i+0x1c2>
 800416e:	6019      	str	r1, [r3, #0]
 8004170:	e002      	b.n	8004178 <_printf_i+0x1c8>
 8004172:	0668      	lsls	r0, r5, #25
 8004174:	d5fb      	bpl.n	800416e <_printf_i+0x1be>
 8004176:	8019      	strh	r1, [r3, #0]
 8004178:	2300      	movs	r3, #0
 800417a:	4616      	mov	r6, r2
 800417c:	6123      	str	r3, [r4, #16]
 800417e:	e7bc      	b.n	80040fa <_printf_i+0x14a>
 8004180:	6833      	ldr	r3, [r6, #0]
 8004182:	2100      	movs	r1, #0
 8004184:	1d1a      	adds	r2, r3, #4
 8004186:	6032      	str	r2, [r6, #0]
 8004188:	681e      	ldr	r6, [r3, #0]
 800418a:	6862      	ldr	r2, [r4, #4]
 800418c:	4630      	mov	r0, r6
 800418e:	f000 f859 	bl	8004244 <memchr>
 8004192:	b108      	cbz	r0, 8004198 <_printf_i+0x1e8>
 8004194:	1b80      	subs	r0, r0, r6
 8004196:	6060      	str	r0, [r4, #4]
 8004198:	6863      	ldr	r3, [r4, #4]
 800419a:	6123      	str	r3, [r4, #16]
 800419c:	2300      	movs	r3, #0
 800419e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041a2:	e7aa      	b.n	80040fa <_printf_i+0x14a>
 80041a4:	4632      	mov	r2, r6
 80041a6:	4649      	mov	r1, r9
 80041a8:	4640      	mov	r0, r8
 80041aa:	6923      	ldr	r3, [r4, #16]
 80041ac:	47d0      	blx	sl
 80041ae:	3001      	adds	r0, #1
 80041b0:	d0ad      	beq.n	800410e <_printf_i+0x15e>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	079b      	lsls	r3, r3, #30
 80041b6:	d413      	bmi.n	80041e0 <_printf_i+0x230>
 80041b8:	68e0      	ldr	r0, [r4, #12]
 80041ba:	9b03      	ldr	r3, [sp, #12]
 80041bc:	4298      	cmp	r0, r3
 80041be:	bfb8      	it	lt
 80041c0:	4618      	movlt	r0, r3
 80041c2:	e7a6      	b.n	8004112 <_printf_i+0x162>
 80041c4:	2301      	movs	r3, #1
 80041c6:	4632      	mov	r2, r6
 80041c8:	4649      	mov	r1, r9
 80041ca:	4640      	mov	r0, r8
 80041cc:	47d0      	blx	sl
 80041ce:	3001      	adds	r0, #1
 80041d0:	d09d      	beq.n	800410e <_printf_i+0x15e>
 80041d2:	3501      	adds	r5, #1
 80041d4:	68e3      	ldr	r3, [r4, #12]
 80041d6:	9903      	ldr	r1, [sp, #12]
 80041d8:	1a5b      	subs	r3, r3, r1
 80041da:	42ab      	cmp	r3, r5
 80041dc:	dcf2      	bgt.n	80041c4 <_printf_i+0x214>
 80041de:	e7eb      	b.n	80041b8 <_printf_i+0x208>
 80041e0:	2500      	movs	r5, #0
 80041e2:	f104 0619 	add.w	r6, r4, #25
 80041e6:	e7f5      	b.n	80041d4 <_printf_i+0x224>
 80041e8:	080063f7 	.word	0x080063f7
 80041ec:	08006408 	.word	0x08006408

080041f0 <memmove>:
 80041f0:	4288      	cmp	r0, r1
 80041f2:	b510      	push	{r4, lr}
 80041f4:	eb01 0402 	add.w	r4, r1, r2
 80041f8:	d902      	bls.n	8004200 <memmove+0x10>
 80041fa:	4284      	cmp	r4, r0
 80041fc:	4623      	mov	r3, r4
 80041fe:	d807      	bhi.n	8004210 <memmove+0x20>
 8004200:	1e43      	subs	r3, r0, #1
 8004202:	42a1      	cmp	r1, r4
 8004204:	d008      	beq.n	8004218 <memmove+0x28>
 8004206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800420a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800420e:	e7f8      	b.n	8004202 <memmove+0x12>
 8004210:	4601      	mov	r1, r0
 8004212:	4402      	add	r2, r0
 8004214:	428a      	cmp	r2, r1
 8004216:	d100      	bne.n	800421a <memmove+0x2a>
 8004218:	bd10      	pop	{r4, pc}
 800421a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800421e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004222:	e7f7      	b.n	8004214 <memmove+0x24>

08004224 <_sbrk_r>:
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	2300      	movs	r3, #0
 8004228:	4d05      	ldr	r5, [pc, #20]	@ (8004240 <_sbrk_r+0x1c>)
 800422a:	4604      	mov	r4, r0
 800422c:	4608      	mov	r0, r1
 800422e:	602b      	str	r3, [r5, #0]
 8004230:	f7fd fbac 	bl	800198c <_sbrk>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_sbrk_r+0x1a>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	b103      	cbz	r3, 800423e <_sbrk_r+0x1a>
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	2000073c 	.word	0x2000073c

08004244 <memchr>:
 8004244:	4603      	mov	r3, r0
 8004246:	b510      	push	{r4, lr}
 8004248:	b2c9      	uxtb	r1, r1
 800424a:	4402      	add	r2, r0
 800424c:	4293      	cmp	r3, r2
 800424e:	4618      	mov	r0, r3
 8004250:	d101      	bne.n	8004256 <memchr+0x12>
 8004252:	2000      	movs	r0, #0
 8004254:	e003      	b.n	800425e <memchr+0x1a>
 8004256:	7804      	ldrb	r4, [r0, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	428c      	cmp	r4, r1
 800425c:	d1f6      	bne.n	800424c <memchr+0x8>
 800425e:	bd10      	pop	{r4, pc}

08004260 <memcpy>:
 8004260:	440a      	add	r2, r1
 8004262:	4291      	cmp	r1, r2
 8004264:	f100 33ff 	add.w	r3, r0, #4294967295
 8004268:	d100      	bne.n	800426c <memcpy+0xc>
 800426a:	4770      	bx	lr
 800426c:	b510      	push	{r4, lr}
 800426e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004272:	4291      	cmp	r1, r2
 8004274:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004278:	d1f9      	bne.n	800426e <memcpy+0xe>
 800427a:	bd10      	pop	{r4, pc}

0800427c <_realloc_r>:
 800427c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004280:	4680      	mov	r8, r0
 8004282:	4615      	mov	r5, r2
 8004284:	460c      	mov	r4, r1
 8004286:	b921      	cbnz	r1, 8004292 <_realloc_r+0x16>
 8004288:	4611      	mov	r1, r2
 800428a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800428e:	f7ff bc39 	b.w	8003b04 <_malloc_r>
 8004292:	b92a      	cbnz	r2, 80042a0 <_realloc_r+0x24>
 8004294:	f7ff fbcc 	bl	8003a30 <_free_r>
 8004298:	2400      	movs	r4, #0
 800429a:	4620      	mov	r0, r4
 800429c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a0:	f000 f81a 	bl	80042d8 <_malloc_usable_size_r>
 80042a4:	4285      	cmp	r5, r0
 80042a6:	4606      	mov	r6, r0
 80042a8:	d802      	bhi.n	80042b0 <_realloc_r+0x34>
 80042aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042ae:	d8f4      	bhi.n	800429a <_realloc_r+0x1e>
 80042b0:	4629      	mov	r1, r5
 80042b2:	4640      	mov	r0, r8
 80042b4:	f7ff fc26 	bl	8003b04 <_malloc_r>
 80042b8:	4607      	mov	r7, r0
 80042ba:	2800      	cmp	r0, #0
 80042bc:	d0ec      	beq.n	8004298 <_realloc_r+0x1c>
 80042be:	42b5      	cmp	r5, r6
 80042c0:	462a      	mov	r2, r5
 80042c2:	4621      	mov	r1, r4
 80042c4:	bf28      	it	cs
 80042c6:	4632      	movcs	r2, r6
 80042c8:	f7ff ffca 	bl	8004260 <memcpy>
 80042cc:	4621      	mov	r1, r4
 80042ce:	4640      	mov	r0, r8
 80042d0:	f7ff fbae 	bl	8003a30 <_free_r>
 80042d4:	463c      	mov	r4, r7
 80042d6:	e7e0      	b.n	800429a <_realloc_r+0x1e>

080042d8 <_malloc_usable_size_r>:
 80042d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042dc:	1f18      	subs	r0, r3, #4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bfbc      	itt	lt
 80042e2:	580b      	ldrlt	r3, [r1, r0]
 80042e4:	18c0      	addlt	r0, r0, r3
 80042e6:	4770      	bx	lr

080042e8 <_init>:
 80042e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ea:	bf00      	nop
 80042ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ee:	bc08      	pop	{r3}
 80042f0:	469e      	mov	lr, r3
 80042f2:	4770      	bx	lr

080042f4 <_fini>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	bf00      	nop
 80042f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042fa:	bc08      	pop	{r3}
 80042fc:	469e      	mov	lr, r3
 80042fe:	4770      	bx	lr
